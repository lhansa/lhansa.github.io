<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Leonardo Hansa</title>
<link>https://lhansa.github.io/contenidos.html</link>
<atom:link href="https://lhansa.github.io/contenidos.xml" rel="self" type="application/rss+xml"/>
<description>Tips sobre análisis de datos</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Sun, 04 Aug 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Pernotaciones por Comunidades Autónomas</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-08-04-viajeros/</link>
  <description><![CDATA[ 




<p>El INE tiene unos datos de pernoctaciones a distintos niveles, mes a mes. Me interesan a nivel de Comunidad Autónoma.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-4"></span>
<span id="cb1-5">ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_light</span>())</span>
<span id="cb1-6"></span>
<span id="cb1-7">df_pernoctaciones <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2941 (1).csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">locale =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">locale</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">encoding =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latin1"</span>))</span>
<span id="cb1-8"></span>
<span id="cb1-9">df_pernoctaciones <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(df_pernoctaciones)</span></code></pre></div>
</div>
<p>El formato de los datos nunca entenderé quién lo ha decidido. Imagino que alguien que no tenía que trabajar con ellos. Los proceso un poco.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df_series <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_pernoctaciones <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quito NAs porque son el total</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(comunidades_y_ciudades_autonomas)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">periodo =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(periodo, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D01"</span>), </span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">periodo =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(periodo, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%YM%mD%d"</span>), </span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(</span>
<span id="cb2-8">      total, </span>
<span id="cb2-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">locale =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">locale</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grouping_mark =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>),</span>
<span id="cb2-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".."</span>)</span>
<span id="cb2-11">    )</span>
<span id="cb2-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(comunidades_y_ciudades_autonomas, periodo) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pernoctaciones =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(total, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>)</span></code></pre></div>
</div>
<p>Y aquí, la evolución de pernoctaciones mes a mes de cada Comunidad Autónoma:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">formato <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_number</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">big.mark =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">suffix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_series, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> periodo, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pernoctaciones)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#800080"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> formato) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(</span>
<span id="cb3-7">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>comunidades_y_ciudades_autonomas, </span>
<span id="cb3-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>, </span>
<span id="cb3-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb3-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pernoctaciones mensuales por CCAA"</span>, </span>
<span id="cb3-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fuente: INE"</span>, </span>
<span id="cb3-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pernoctaciones (miles)"</span>, </span>
<span id="cb3-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb3-16">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-08-04-viajeros/index_files/figure-html/evolucion-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>exploraciones</category>
  <guid>https://lhansa.github.io/posts/2024-08-04-viajeros/</guid>
  <pubDate>Sun, 04 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Papel del punto en R</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-08-04-puntos-en-R/</link>
  <description><![CDATA[ 




<p>Guillermo Luijk <a href="https://www.linkedin.com/feed/update/urn:li:activity:7225379882355044352?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7225379882355044352%2C7225391436190371840%29&amp;replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7225379882355044352%2C7225459855812120576%29&amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287225391436190371840%2Curn%3Ali%3Aactivity%3A7225379882355044352%29&amp;dashReplyUrn=urn%3Ali%3Afsd_comment%3A%287225459855812120576%2Curn%3Ali%3Aactivity%3A7225379882355044352%29">criticaba</a> el punto en R porque se permite usar en el nombre de variables, lo que limita su uso fuera de ellas.</p>
<p>He intentado crear un operador en R con <code>.</code> que sirviera para sustituir en cierto modo al operador <code>$</code>. Imposible.</p>
<p>Pero comparto avances porque quizá, aunque sea al Leo del futuro, le puede venir bien.</p>
<section id="operadores-infix-propios-en-r" class="level2">
<h2 class="anchored" data-anchor-id="operadores-infix-propios-en-r">Operadores <em>infix</em> propios en R</h2>
<p>Todo lo que haces en R es una función. Pero no todas las funciones necesitan paréntesis. Por ejemplo, puedes sumar de dos formas:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p>La primera opción creo que se llama <em>infix</em>. Hay operaciones que se entienden mucho mejor así escritas que escritas como la segunda opción.</p>
<p>De hecho, esa es la filosofía del <em>pipe</em>. El <em>pipe</em> está disponible desde R 4.1.0 con <code>|&gt;</code> pero antiguamente había que usar la librería <strong>magrittr</strong>.</p>
<p>Como esta librería no formaba parte de lo fundamentos del lenguaje, todos los operadores tenían que ser propios y para hacer eso hay que usar una sintaxis muy particular.</p>
<p>Los pipes de magrittr van acotados por <code>%</code>, porque esa es la sintaxis obligatoria para cualquier operador que quieras hacer y usar <em>infix</em>. Así resultó en <code>%&gt;%</code>.</p>
</section>
<section id="creación-de-un-operador-propio" class="level2">
<h2 class="anchored" data-anchor-id="creación-de-un-operador-propio">Creación de un operador propio</h2>
<p>Mi objetivo era un operador <code>.</code> con el que pudiera hacer <code>df.columna</code>, por ejemplo, que <code>mtcars.cyl</code> obtuviera resultado. Sería algo así:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mtcars.cyl</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code> [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4</code></pre>
</div>
</div>
<p>Si intentas ejecutar eso, te dará error. Y no he dado con ninguna forma de hacerlo funcionar. Porque cualquier operador propio tiene que ir rodeado de <code>%</code>.</p>
<p>Por ello, esto es lo que he conseguido:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%.%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, columna) {</span>
<span id="cb7-2">    df[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(columna))]]</span>
<span id="cb7-3">}</span>
<span id="cb7-4"></span>
<span id="cb7-5">mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.%</span>cyl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-08-04-puntos-en-R/</guid>
  <pubDate>Sun, 04 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Concatenación de strings con R, con benchmark</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-07-30-concatena-strings/</link>
  <description><![CDATA[ 




<p>Tienes una variable con un texto que tienes que introducirlo dentro de otro texto. Este ocurre habitualmente cuando un usuario pone algún parámetro de tipo texto y tienes que incluir en un párrafo preconstruido, o interactuar de alguna forma con ese nombre, por ejemmplo, un chatbot clásico que recibía como entrada el nombre del usuario y luego le preguntaba “¿Qué tal estás, <nombre de="" usuario="">?” (no sé si eso es tan clásico o sigue siendo orden del día).</nombre></p>
<p>En este post comparo tiempos de ejecución de varias opciones que tienes en R.</p>
<p>La idea general te la da este código:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">nombre_entrada <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pepito"</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hola,"</span>, nombre_entrada)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hola, Pepito"</code></pre>
</div>
</div>
<p>Voy a crear varias funciones con distintas formas de hacer esto y luego cuento tiempos de cómputo.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">con_paste <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nombre_entrada) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hola,"</span>, nombre_entrada)</span>
<span id="cb3-2">con_sprintf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nombre_entrada) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hola, %s"</span>, nombre_entrada)</span>
<span id="cb3-3">con_glue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nombre_entrada) glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hola, {nombre_entrada}"</span>)</span>
<span id="cb3-4">con_gsub <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nombre_entrada) {</span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nombre_entrada"</span>, nombre_entrada, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hola, nombre_entrada"</span>) </span>
<span id="cb3-6">}</span></code></pre></div>
</div>
<p>Y aquí los tiempos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">microbenchmark<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con_paste =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">con_paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pepito"</span>),</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con_sprintf =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">con_sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pepito"</span>),</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con_glue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">con_glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pepito"</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con_gsub =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">con_gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pepito"</span>)</span>
<span id="cb4-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: nanoseconds
        expr    min       lq      mean   median       uq      max neval
   con_paste   2202   2650.5  12954.99   3401.0   4201.0   850801   100
 con_sprintf    901   1250.5  11382.94   2101.0   3151.0   790101   100
    con_glue 135902 143701.0 591651.04 154401.0 180501.5 41454102   100
    con_gsub  10301  12150.0  30976.88  14801.5  18202.0  1449701   100</code></pre>
</div>
</div>
<p>En casos más complicados, <code>glue::glue()</code> puede parecer más intuitivo. ¿Es ese el único motivo para usarlo?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">con_paste <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nombre_entrada) {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hola, "</span>, nombre_entrada, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">". ¿Cómo estás, "</span>, nombre_entrada, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?"</span>)</span>
<span id="cb6-3">} </span>
<span id="cb6-4">con_sprintf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nombre_entrada) {</span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hola, %s. ¿Cómo estás, %s?"</span>, nombre_entrada, nombre_entrada)</span>
<span id="cb6-6">  </span>
<span id="cb6-7">} </span>
<span id="cb6-8">con_glue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nombre_entrada) {</span>
<span id="cb6-9">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hola, {nombre_entrada}. ¿Cómo estás, {nombre_entrada}?"</span>)</span>
<span id="cb6-10">  </span>
<span id="cb6-11">}</span>
<span id="cb6-12">con_gsub <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nombre_entrada) {</span>
<span id="cb6-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nombre_entrada"</span>, nombre_entrada, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hola, nombre_entrada. ¿Cómo estás, nombre_entrada?"</span>) </span>
<span id="cb6-14">}</span>
<span id="cb6-15"></span>
<span id="cb6-16">microbenchmark<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb6-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con_paste =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">con_paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pepito"</span>),</span>
<span id="cb6-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con_sprintf =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">con_sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pepito"</span>),</span>
<span id="cb6-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con_glue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">con_glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pepito"</span>),</span>
<span id="cb6-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con_gsub =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">con_gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pepito"</span>)</span>
<span id="cb6-21">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: microseconds
        expr     min       lq      mean   median       uq      max neval
   con_paste   2.701   3.2010  14.34601   4.0010   4.4005 1040.201   100
 con_sprintf   1.200   1.7015  15.13189   2.6515   3.2010 1225.901   100
    con_glue 149.201 157.8510 182.23310 162.9015 168.9510 1041.801   100
    con_gsub  13.601  15.5005  33.93807  18.0510  19.5515 1564.500   100</code></pre>
</div>
</div>



 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-07-30-concatena-strings/</guid>
  <pubDate>Tue, 30 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Evolución de compraventa mensual en España</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-05-25-viviendas/</link>
  <description><![CDATA[ 




<p>El INE tiene datos mensuales sobre compraventa de viviendas por Comunidades Autónomas (lo tiene por provincias pero he pasado de ese nivel):</p>
<div id="cell-lectura" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">df_viviendas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb1-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ine-compraventa.csv'</span>, </span>
<span id="cb1-5">  sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span>, </span>
<span id="cb1-6">  thousands<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>,</span>
<span id="cb1-7">  encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iso-8859-1'</span></span>
<span id="cb1-8">)</span>
<span id="cb1-9"></span>
<span id="cb1-10">df_viviendas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-11">  df_viviendas</span>
<span id="cb1-12">  .drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Régimen y estado'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total Nacional'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Provincias'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-13">  .rename(</span>
<span id="cb1-14">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.lower().replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>).encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ascii'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>))</span>
<span id="cb1-15">)</span>
<span id="cb1-16"></span>
<span id="cb1-17">df_viviendas.head()</span></code></pre></div>
<div id="lectura" class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">comunidades_y_ciudades_autnomas</th>
<th data-quarto-table-cell-role="th">periodo</th>
<th data-quarto-table-cell-role="th">total</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>01 Andalucía</td>
<td>2024M03</td>
<td>8805</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>01 Andalucía</td>
<td>2024M02</td>
<td>9606</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>01 Andalucía</td>
<td>2024M01</td>
<td>10290</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>01 Andalucía</td>
<td>2023M12</td>
<td>7519</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>01 Andalucía</td>
<td>2023M11</td>
<td>9857</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Vamos a tratarlo un poco (tampoco mucho, que es sábado):</p>
<div id="cell-algo-tratamiento" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df_viviendas[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'periodo'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df_viviendas[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'periodo'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%YM%m'</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">df_viviendas[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'comunidades_y_ciudades_autnomas'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_viviendas[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'comunidades_y_ciudades_autnomas'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{2}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> '</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, regex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"></span>
<span id="cb2-6">df_viviendas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-7">  df_viviendas</span>
<span id="cb2-8">  .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'comunidades_y_ciudades_autnomas'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ccaa'</span>})</span>
<span id="cb2-9">)</span>
<span id="cb2-10"></span>
<span id="cb2-11">df_viviendas.head()</span></code></pre></div>
<div id="algo-tratamiento" class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ccaa</th>
<th data-quarto-table-cell-role="th">periodo</th>
<th data-quarto-table-cell-role="th">total</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Andalucía</td>
<td>2024-03-01</td>
<td>8805</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Andalucía</td>
<td>2024-02-01</td>
<td>9606</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Andalucía</td>
<td>2024-01-01</td>
<td>10290</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Andalucía</td>
<td>2023-12-01</td>
<td>7519</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Andalucía</td>
<td>2023-11-01</td>
<td>9857</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Mucho mejor. Ahora toca visualizar esto.</p>
<p>El siguiente código es de ChatGPT… y sinceramente, creo que está mal, que pinta lo que le da la gana y no lo que yo quiero (concretamente, se inventa el orden del eje x).</p>
<p>Pero llevo horas con problemas de VSCode, versiones de Python, entornos virtuales y paso de dedicarle más tiempo a esto hoy (cosa que en R habrían sido 5 minutos).</p>
<p>Otro día.</p>
<div id="cell-evolucion" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.dates <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mdates</span>
<span id="cb3-4"></span>
<span id="cb3-5">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.FacetGrid(</span>
<span id="cb3-6">  df_viviendas, </span>
<span id="cb3-7">  col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ccaa'</span>, </span>
<span id="cb3-8">  col_wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb3-9">  hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ccaa'</span>, </span>
<span id="cb3-10">  sharey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb3-11">)  </span>
<span id="cb3-12"></span>
<span id="cb3-13">g.map_dataframe(sns.lineplot, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'periodo'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total'</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ajustar las etiquetas y el layout</span></span>
<span id="cb3-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> g.axes.flatten():</span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ajustar los locators para que solo se muestren unos pocos ticks</span></span>
<span id="cb3-18">    ax.xaxis.set_major_locator(mdates.MonthLocator(interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ajusta el intervalo según sea necesario</span></span>
<span id="cb3-19">    ax.xaxis.set_major_formatter(mdates.DateFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m'</span>))</span>
<span id="cb3-20">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22">g.set_axis_labels(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fecha'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total'</span>)</span>
<span id="cb3-23"></span>
<span id="cb3-24">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-05-25-viviendas/index_files/figure-html/evolucion-output-1.png" id="evolucion" width="1441" height="1179" class="figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-05-25-viviendas/</guid>
  <pubDate>Sat, 25 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Un problema habitual en ficheros CSV</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-05-09-csv/</link>
  <description><![CDATA[ 




<p>Tienes el conjunto de datos <em>iris</em> en un fichero de texto plano con esta pinta:</p>
<pre><code>sepal length (cm);sepal width (cm);petal length (cm);petal width (cm);species
5.1;3.5;1.4;0.2;0;1,000.23
4.9;3.0;1.4;0.2;0;1,000.23
4.7;3.2;1.3;0.2;0;1,000.23
4.6;3.1;1.5;0.2;0;1,000.23
5.0;3.6;1.4;0.2;0;1,000.23
5.4;3.9;1.7;0.4;0;1,000.23</code></pre>
<p>Como verás, lo he tuneado un poco: le he añadido una columna con valor constante 1000.23, escrito con el formato anglosajón de separador de miles usando comas.</p>
<p>Maravilloso. A ver cómo lo leemos.</p>
<section id="r" class="level2">
<h2 class="anchored" data-anchor-id="r">R</h2>
<p>En R, puedes tener la tentación de leerlo así:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb2-2">df_iris <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris.txt"</span>)</span>
<span id="cb2-3">df_iris</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 150 × 1
   sepal length (cm);sepal width (cm);petal length (cm);petal width (cm);speci…¹
   &lt;chr&gt;                                                                        
 1 5.1;3.5;1.4;0.2;0;1,000.23                                                   
 2 4.9;3.0;1.4;0.2;0;1,000.23                                                   
 3 4.7;3.2;1.3;0.2;0;1,000.23                                                   
 4 4.6;3.1;1.5;0.2;0;1,000.23                                                   
 5 5.0;3.6;1.4;0.2;0;1,000.23                                                   
 6 5.4;3.9;1.7;0.4;0;1,000.23                                                   
 7 4.6;3.4;1.4;0.3;0;1,000.23                                                   
 8 5.0;3.4;1.5;0.2;0;1,000.23                                                   
 9 4.4;2.9;1.4;0.2;0;1,000.23                                                   
10 4.9;3.1;1.5;0.1;0;1,000.23                                                   
# ℹ 140 more rows
# ℹ abbreviated name:
#   ¹​`sepal length (cm);sepal width (cm);petal length (cm);petal width (cm);species;extra`</code></pre>
</div>
</div>
<p>Todo horrible porque está todo dentro de una columna. La función no ha sabido separar en columnas porque esperaba la coma como delimitador. La coma está en los valores de la columna <code>extra</code> pero no en la primera fila, con los nombres de columnas. Así que <code>read_csv</code> entiende que solo hay una columna.</p>
<p><code>read.csv()</code> se hace bastante lío y daría error con algo así.</p>
<p>Un clásico cuando no te funciona <code>read_csv()</code> es probar <code>read_csv2()</code>, que asume que la separación es <code>";"</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">df_iris <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris.txt"</span>)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df_iris)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 6
  `sepal length (cm)` `sepal width (cm)` `petal length (cm)` `petal width (cm)`
                &lt;dbl&gt;              &lt;dbl&gt;               &lt;dbl&gt; &lt;chr&gt;             
1                  51                 35                  14 0.2               
2                  49                 30                  14 0.2               
3                  47                 32                  13 0.2               
4                  46                 31                  15 0.2               
5                  50                 36                  14 0.2               
6                  54                 39                  17 0.4               
# ℹ 2 more variables: species &lt;dbl&gt;, extra &lt;dbl&gt;</code></pre>
</div>
</div>
<p>Tampoco funciona.</p>
<p>Las columnas sí están separadas, pero los valores no tienens sentido. <code>read_csv2()</code> ha usado la coma como separador decimal. Y los puntos que había en los números, se los ha pasado por ahí. Y la columna <code>extra</code> la ha puesto como si la coma fuera el separador decimal, cuando realmente es el separador de miles.</p>
<p>Así que mal.</p>
<p>Si usaras R base con <code>read.csv2()</code> tendrías también un poco de lío, con columnas identificadas como texto en lugar de número.</p>
<p>En estos casos, yo tiro de <code>readr::read_delim()</code> especificando cuál es el separador de miles y cuál el decimal (algo equivalente puedes hacer en R base con <code>read.table()</code>).</p>
<p>Con la función <code>readr::locale()</code> especifico estos separadores.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df_iris <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_delim</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">locale =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">locale</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decimal_mark =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grouping_mark =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>))</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df_iris)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 6
  `sepal length (cm)` `sepal width (cm)` `petal length (cm)` `petal width (cm)`
                &lt;dbl&gt;              &lt;dbl&gt;               &lt;dbl&gt;              &lt;dbl&gt;
1                 5.1                3.5                 1.4                0.2
2                 4.9                3                   1.4                0.2
3                 4.7                3.2                 1.3                0.2
4                 4.6                3.1                 1.5                0.2
5                 5                  3.6                 1.4                0.2
6                 5.4                3.9                 1.7                0.4
# ℹ 2 more variables: species &lt;dbl&gt;, extra &lt;dbl&gt;</code></pre>
</div>
</div>
<p>Es un esperpento anti-estandarizaciones, pero ocurre. Debe de haber algunas herramientas de estas que descargan informes en texto plano que tienen esta configuración horrorosa, porque me llegan ficheros así cada dos por tres.</p>
<p>Y como no son estándar, las funciones habituales de lectura de CSVs se hacen bastante lío.</p>
<p>Para casos así, intento <strong>ser muy explícito con el código</strong> y <code>read_delim()</code> me obliga a ello por sistema.</p>
</section>
<section id="con-python" class="level2">
<h2 class="anchored" data-anchor-id="con-python">Con Python</h2>
<p>En Python usaría directamente la función de pandas <code>pd.read_csv()</code> especificando todo.</p>
<p>Por defecto no funciona:</p>
<div class="cell" data-python.reticulate="false">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb8-2">df_iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iris.txt'</span>)</span>
<span id="cb8-3">df_iris.head()</span></code></pre></div>
</div>
<p>Pero cada cosa tiene su argumento:</p>
<div class="cell" data-python.reticulate="false">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-2">df_iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb9-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iris.txt'</span>, </span>
<span id="cb9-4">  sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span>, </span>
<span id="cb9-5">  decimal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#no necesario en este caso</span></span>
<span id="cb9-6">  thousands<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span></span>
<span id="cb9-7">  </span>
<span id="cb9-8">  )</span>
<span id="cb9-9">df_iris.head()</span></code></pre></div>
</div>
<p>La función <code>pd.read_csv()</code> ya asume que el separador decimal es el punto, así que no hace falta especificar nada de eso esta vez…</p>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-05-09-csv/</guid>
  <pubDate>Thu, 09 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Por qué puedes necesitar non standard evaluation en dplyr</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-04-24-por-que-nse/</link>
  <description><![CDATA[ 




<p>Tienes los datos de <code>penguins</code> y quieres hacer una función con el código de una exploración sobre este conjunto de datos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">df_penguins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> palmerpenguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins</span>
<span id="cb1-2">df_penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7               181        3750
 2 Adelie  Torgersen           39.5          17.4               186        3800
 3 Adelie  Torgersen           40.3          18                 195        3250
 4 Adelie  Torgersen           NA            NA                  NA          NA
 5 Adelie  Torgersen           36.7          19.3               193        3450
 6 Adelie  Torgersen           39.3          20.6               190        3650
 7 Adelie  Torgersen           38.9          17.8               181        3625
 8 Adelie  Torgersen           39.2          19.6               195        4675
 9 Adelie  Torgersen           34.1          18.1               193        3475
10 Adelie  Torgersen           42            20.2               190        4250
# ℹ 334 more rows
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<p>La situación que te planteo es que tienes que crear una función cuyo argumento sea el nombre de una de las columnas, y calcule la media de la longitud del pico (<code>bill_length_mm</code>) en función de esa columna. Con dplyr.</p>
<section id="planteamiento-tidyselect" class="level2">
<h2 class="anchored" data-anchor-id="planteamiento-tidyselect">Planteamiento <code>tidyselect</code></h2>
<p>Una forma de hacerlo, aceptando que el nombre de la columna venga como <code>character</code>, es esta:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb3-2"></span>
<span id="cb3-3">calcula_mediana_pico <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, columna_grupos) {</span>
<span id="cb3-4">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(columna_grupos))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mediana_long_pico =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb3-7">}</span>
<span id="cb3-8"></span>
<span id="cb3-9">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana_pico</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"island"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  island    mediana_long_pico
  &lt;fct&gt;                 &lt;dbl&gt;
1 Biscoe                 45.8
2 Dream                  44.7
3 Torgersen              38.9</code></pre>
</div>
</div>
<p>Le pongo una pega. Puede haber más pero yo le pongo solo una: que tengo que entrecomillar la columna con la que agrupo. O sea, no puedo hacer esto:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana_pico</span>(island)</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error: object 'island' not found</span></span></code></pre></div>
</div>
</section>
<section id="planteamiento-rlang" class="level2">
<h2 class="anchored" data-anchor-id="planteamiento-rlang">Planteamiento rlang</h2>
<p>Me gustaría que ese código funcionara, porque con dplyr es normal escribir los nombres de columnas sin comillas:</p>
<ul>
<li>Puedes usar el autocompletado (con comillas no)</li>
<li>Va a ser consistente con otras funciones de dplyr</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(island, bill_length_mm, year) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana_pico</span>(island)</span></code></pre></div>
</div>
<p>En un código como ese, no quiero tener que entrecomillar <code>island</code> porque no viene a cuento.</p>
<p>Eso lo puedo solucionar con rlang. La función quedará algo así:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb7-2"></span>
<span id="cb7-3">calcula_mediana_pico <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, columna_grupos) {</span>
<span id="cb7-4">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(columna_grupos)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mediana_long_pico =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb7-7">}</span></code></pre></div>
</div>
<p>Te destripo ese ingrediente que acabo de poner.</p>
<section id="enquo" class="level3">
<h3 class="anchored" data-anchor-id="enquo"><code>enquo</code></h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(argumento) {</span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(argumento)</span>
<span id="cb8-3">}</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(island)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;quosure&gt;
expr: ^island
env:  global</code></pre>
</div>
</div>
<p><code>enquo()</code> me devuelve lo que se llama una <em>quosure</em> (ni idea de su traducción): lo puedes ver como una expresión con información sobre el entorno.</p>
<p>Al evaluar <code>enquo()</code> dentro de una función con un argumento, obtenemos el valor que se le ha dado al argumento sin llegar a evaluarlo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;quosure&gt;
expr: ^1 + 1
env:  global</code></pre>
</div>
</div>
<p>Para evaluarlo tenemos que:</p>
<ul>
<li>Añadir el operador <code>!!</code> (<em>bang bang</em>).</li>
<li>Operar dentro de unas funciones determinadas, como muchas de dplyr.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">selecciona <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(columna) {</span>
<span id="cb12-2">  df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(columna))</span>
<span id="cb12-4">}</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selecciona</span>(island) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_head</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 1
  island   
  &lt;fct&gt;    
1 Torgersen
2 Torgersen
3 Torgersen
4 Torgersen
5 Torgersen
6 Torgersen</code></pre>
</div>
</div>
<p>Que es justo lo que hacía en la función que te planteé más arriba:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">calcula_mediana_pico <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, columna_grupos) {</span>
<span id="cb14-2">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(columna_grupos)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mediana_long_pico =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb14-5">}</span>
<span id="cb14-6"></span>
<span id="cb14-7">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana_pico</span>(species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  species   mediana_long_pico
  &lt;fct&gt;                 &lt;dbl&gt;
1 Adelie                 38.8
2 Chinstrap              49.6
3 Gentoo                 47.3</code></pre>
</div>
</div>
<p>Ni que decir tiene que es compatible con otras operaciones de dplyr:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(species, bill_length_mm, year) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana_pico</span>(species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(mediana_long_pico))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  species   mediana_long_pico
  &lt;fct&gt;                 &lt;dbl&gt;
1 Chinstrap              49.7
2 Gentoo                 47.5
3 Adelie                 38.7</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p><code>!!enquo()</code> puede reemplazarse por el operador <code>{{}}</code> (<em>curly curly</em>), con el que tus códigos quedarán más limpios, aunque a mí no termina de gustarme porque creo que se enienden peor los elemenos de la librería rlang.</p>
</blockquote>
</section>
<section id="más-columnas" class="level3">
<h3 class="anchored" data-anchor-id="más-columnas">Más columnas</h3>
<p>Vale, ahora no solo quieres dar al usuario la posibilidad de que dé la columna de agrupación, sino también la métrica que agregamos.</p>
<p>Si solo quieres eso, no necesitas más ingredientes, pero ya verás cómo sí quieres tener otra cosa:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">calcula_mediana <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, columna_grupos, metrica) {</span>
<span id="cb18-2">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(columna_grupos)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cambio nombre de la mediana</span></span>
<span id="cb18-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mediana =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(metrica), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb18-6">}</span>
<span id="cb18-7"></span>
<span id="cb18-8">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana</span>(species, bill_depth_mm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  species   mediana
  &lt;fct&gt;       &lt;dbl&gt;
1 Adelie       18.4
2 Chinstrap    18.4
3 Gentoo       15  </code></pre>
</div>
</div>
<p>Guay, ha funcionado. Puedo usar cualquier métrica y columna:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana</span>(year, flipper_length_mm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
   year mediana
  &lt;int&gt;   &lt;dbl&gt;
1  2007     195
2  2008     200
3  2009     199</code></pre>
</div>
</div>
<p>Lo que me falta ahora es poder cambiar el nombre también de la columna mediana en función de la métrica elegida.</p>
</section>
<section id="y-as_name" class="level3">
<h3 class="anchored" data-anchor-id="y-as_name"><code>:=</code> y <code>as_name</code></h3>
<p>La intuición podría decirte que hicieras algo parecido a la izquierda del igual, con <code>!!enquo()</code>. No te va a funcionar, salvo que añadas el operador. <code>:=</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">calcula_mediana <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, columna_grupos, metrica) {</span>
<span id="cb22-2">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(columna_grupos)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cambio nombre de la mediana</span></span>
<span id="cb22-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(metrica) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(metrica), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb22-6">}</span>
<span id="cb22-7"></span>
<span id="cb22-8">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana</span>(island, bill_depth_mm)</span></code></pre></div>
</div>
<p>Un pequeño cambio y lo solucionas todo.</p>
<p>Pero vamos incluso un paso más allá. Quieres que la métrica nueva no se llame igual que la columna que agregas sino <code>"mediana_"</code> pegado al nombre de la columna. Para eso necesitas la combinación de <code>as_name()</code>, que te va a permitir tratar como <code>character</code> el argumento que pasa el usuario:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_name</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>(bill_length_mm))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "bill_length_mm"</code></pre>
</div>
</div>
<p>Vamos a aplicar esto:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">calcula_mediana <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, columna_grupos, metrica) {</span>
<span id="cb25-2">  nuevo_nombre <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb25-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mediana_"</span>, </span>
<span id="cb25-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_name</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(metrica))</span>
<span id="cb25-5">  )</span>
<span id="cb25-6">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(columna_grupos)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nuevo_nombre :=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(metrica), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb25-9">}</span>
<span id="cb25-10"></span>
<span id="cb25-11">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana</span>(island, bill_depth_mm)</span></code></pre></div>
</div>
<p>O:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">df_penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calcula_mediana</span>(year, body_mass_g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
   year mediana
  &lt;int&gt;   &lt;dbl&gt;
1  2007    3900
2  2008    4200
3  2009    4000</code></pre>
</div>
</div>
<hr>
<p>Como decía más arriba, <code>!!enquo()</code> se puede reemplazar por <code>{{}}</code>, pero creo que dificulta ver el papel de <code>enquo()</code> en todo esto.</p>
<hr>
<p>Atención:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">nuevo_entorno <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new.env</span>()</span>
<span id="cb28-2">nuevo_entorno<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb28-3"></span>
<span id="cb28-4">suma_expr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb28-5">suma_expr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 + 1</code></pre>
</div>
</div>
<p>Y resulta que:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval_tidy</span>(suma_expr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> nuevo_entorno)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
</div>
<p>¿O no?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval_tidy</span>(suma_expr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-04-24-por-que-nse/</guid>
  <pubDate>Wed, 24 Apr 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Cómo aplicar non standard evaluation con dplyr y rlang</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-04-22-empleo/</link>
  <description><![CDATA[ 




<p>Tengo datos de empleos en el sector público y privado del INE. Y los quiero explorar con dplyr y ggplot2.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_light</span>())</span></code></pre></div>
</div>
<p>Leer los ficheros del INE siempre es aventura con sus formatos, pero aquí tienes el código.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df_empleo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../../data/4262.csv"</span>, </span>
<span id="cb2-2">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb2-3">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">locale =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">locale</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">encoding =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latin1"</span>))</span>
<span id="cb2-4"></span>
<span id="cb2-5">df_empleo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(df_empleo) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ccaa =</span> comunidades_y_ciudades_autonomas)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df_empleo)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  ccaa         sexo    tipo_de_sector periodo total
  &lt;chr&gt;        &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt;   &lt;dbl&gt;
1 01 Andalucía Hombres Empleo público 2023T4   286.
2 01 Andalucía Hombres Empleo público 2023T3   298.
3 01 Andalucía Hombres Empleo público 2023T2   289 
4 01 Andalucía Hombres Empleo público 2023T1   294.
5 01 Andalucía Hombres Empleo público 2022T4   297 
6 01 Andalucía Hombres Empleo público 2022T3   299 </code></pre>
</div>
</div>
<section id="una-exploración-rápida" class="level2">
<h2 class="anchored" data-anchor-id="una-exploración-rápida">Una exploración rápida</h2>
<p>Esto es lo que te planteo explorar: una agregación trimestral por tipo de sector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">df_agg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_empleo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(periodo, tipo_de_sector) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(total), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convierte_periodo</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># función propia para convertir a fecha</span></span>
<span id="cb4-5"></span>
<span id="cb4-6">df_agg</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 24 × 3
   periodo    tipo_de_sector  total
   &lt;date&gt;     &lt;chr&gt;           &lt;dbl&gt;
 1 2021-01-01 Empleo privado 15809.
 2 2021-01-01 Empleo público  3397.
 3 2021-04-01 Empleo privado 16232.
 4 2021-04-01 Empleo público  3440.
 5 2021-07-01 Empleo privado 16547.
 6 2021-07-01 Empleo público  3484.
 7 2021-10-01 Empleo privado 16709.
 8 2021-10-01 Empleo público  3476.
 9 2022-01-01 Empleo privado 16617.
10 2022-01-01 Empleo público  3468.
# ℹ 14 more rows</code></pre>
</div>
</div>
<p>Que devuelve un gráfico así.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_agg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> periodo, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> total, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> tipo_de_sector)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_discrete</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tipo de empleo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trimestre"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empleados"</span>, </span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Evolución trimestral de empleados privados y públicos"</span>, </span>
<span id="cb6-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fuente: INE"</span></span>
<span id="cb6-8">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-04-22-empleo/index_files/figure-html/grafico-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="más-libertad" class="level2">
<h2 class="anchored" data-anchor-id="más-libertad">Más libertad</h2>
<p>Ahora voy a preparar una función para que un usuario pueda elegir una columna más con la que agregar.</p>
<p>Lo que quiero es una función con la que funcione un código así:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">agrega_empleo</span>(sexo)</span></code></pre></div>
</div>
<p>Si intentas plantear eso solo con dplyr te dará un error diciendo que cierto objeto no es nada. En el código siguiente, <code>grouping_var</code> no sería nada sino fuera por esa combinación de <code>enquo()</code> con otros elementos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb8-2"></span>
<span id="cb8-3">agrega_empleo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(grouping_var) {</span>
<span id="cb8-4">  nombre_metrica <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_name</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(grouping_var))</span>
<span id="cb8-5">  nombre_metrica <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_por_"</span>, nombre_metrica)</span>
<span id="cb8-6">  df_empleo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(periodo, tipo_de_sector, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(grouping_var)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nombre_metrica :=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(total), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convierte_periodo</span>() </span>
<span id="cb8-10">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">agrega_empleo</span>(ccaa)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 456 × 4
   periodo    tipo_de_sector ccaa                       total_por_ccaa
   &lt;date&gt;     &lt;chr&gt;          &lt;chr&gt;                               &lt;dbl&gt;
 1 2021-01-01 Empleo privado 01 Andalucía                        2469.
 2 2021-01-01 Empleo privado 02 Aragón                            451.
 3 2021-01-01 Empleo privado 03 Asturias, Principado de           294 
 4 2021-01-01 Empleo privado 04 Balears, Illes                    416 
 5 2021-01-01 Empleo privado 05 Canarias                          626 
 6 2021-01-01 Empleo privado 06 Cantabria                         190.
 7 2021-01-01 Empleo privado 07 Castilla y León                   752 
 8 2021-01-01 Empleo privado 08 Castilla - La Mancha              658.
 9 2021-01-01 Empleo privado 09 Cataluña                         2913.
10 2021-01-01 Empleo privado 10 Comunitat Valenciana             1671.
# ℹ 446 more rows</code></pre>
</div>
</div>
<p>En lo anterior, <code>!!enquo()</code> se encarga de evaluar la expresión dentro de grouping_var (<code>ccaa</code> en este caso) en el entorno adecuado.</p>
<p>Si tienes muchas variables, necesitarás algo como lo siguiente (aunque aún no sé cómo afecta eso entonces a los nombres de nuevas columnas).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">agrega_empleo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(...) {</span>
<span id="cb11-2">  df_empleo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(periodo, tipo_de_sector, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquos</span>(...)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(total), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convierte_periodo</span>() </span>
<span id="cb11-6">}</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">agrega_empleo</span>(ccaa, sexo)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 912 × 5
   periodo    tipo_de_sector ccaa                       sexo    total
   &lt;date&gt;     &lt;chr&gt;          &lt;chr&gt;                      &lt;chr&gt;   &lt;dbl&gt;
 1 2021-01-01 Empleo privado 01 Andalucía               Hombres 1474 
 2 2021-01-01 Empleo privado 01 Andalucía               Mujeres  995.
 3 2021-01-01 Empleo privado 02 Aragón                  Hombres  268 
 4 2021-01-01 Empleo privado 02 Aragón                  Mujeres  183.
 5 2021-01-01 Empleo privado 03 Asturias, Principado de Hombres  164.
 6 2021-01-01 Empleo privado 03 Asturias, Principado de Mujeres  130.
 7 2021-01-01 Empleo privado 04 Balears, Illes          Hombres  233.
 8 2021-01-01 Empleo privado 04 Balears, Illes          Mujeres  183.
 9 2021-01-01 Empleo privado 05 Canarias                Hombres  335.
10 2021-01-01 Empleo privado 05 Canarias                Mujeres  291.
# ℹ 902 more rows</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-04-22-empleo/</guid>
  <pubDate>Mon, 22 Apr 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Cómo procesas datos que no te caben en RAM</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-04-21-dataframes-inmemory/</link>
  <description><![CDATA[ 




<p>Tengo unos 16GB de datos en ficheros parquet en una carpeta.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page</span></span>
<span id="cb1-2">path_to_folder <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../../data/taxiny/"</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://stackoverflow.com/a/68145683/7569570</span></span>
<span id="cb1-5">dir_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(path))</span>
<span id="cb1-7">  files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> recursive)</span>
<span id="cb1-8">  vect_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(files, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.size</span>(x))</span>
<span id="cb1-9">  size_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(vect_size)</span>
<span id="cb1-10">  size_files</span>
<span id="cb1-11">}</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_size</span>(path_to_folder)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GB"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>16.74646 GB</code></pre>
</div>
</div>
<p>Cada fichero tiene datos de trayectos de taxi en la ciudad de Nueva York.</p>
<p>Quiero calcular cuántos trayectos con tarifa de aeropuerto ha habido en cada día, desde enero de 2021 hasta febrero de 2024. Es una operación con una estructura sencilla: si te cupiera en un Excel lo podrías plantear en una tabla dinámica sin muchas especificaciones.</p>
<p>O con SQL como lingua franca, si tuviera todos los datos en una tabla, sería algo así:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> Viajes</span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> airport_fee <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span></span></code></pre></div>
</div>
<p>Pero no los tengo todos en una tabla, sino en 38 ficheros. En cualquier programa orientado a dato es fácil juntar varias en tablas en una, con algún <em>concat</em> o variantes. <strong>Pero tengo 16GB de datos para un portátil de 8GB de RAM:</strong> no voy a poder.</p>
<p>Así que necesito calcular eso sin cargar todo en memoria. ¿Cómo procedo?</p>
<section id="versión-directa" class="level2">
<h2 class="anchored" data-anchor-id="versión-directa">Versión directa</h2>
<p>Si lo que conoces es R (aplica también a pandas y Python), podrías plantear un bucle que itere sobre cada fichero.</p>
<p>Los ficheros están en parquet, así que usaré la librería <strong>arrow</strong> para cargar sus datos en un data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(arrow)</span></code></pre></div>
</div>
<p>La operación con un solo fichero sería algo así:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_parquet</span>(</span>
<span id="cb5-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../../data/taxiny/fhvhv_tripdata_2023-01.parquet"</span>, </span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_select =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pickup_datetime"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airport_fee"</span>),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as_data_frame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-5">)</span>
<span id="cb5-6"></span>
<span id="cb5-7">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(airport_fee <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(pickup_datetime)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> day) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_head</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   day        count
   &lt;date&gt;     &lt;int&gt;
 1 2023-01-01 41384
 2 2023-01-02 50682
 3 2023-01-03 50072
 4 2023-01-04 43015
 5 2023-01-05 42661
 6 2023-01-06 41856
 7 2023-01-07 36971
 8 2023-01-08 50466
 9 2023-01-09 46022
10 2023-01-10 39091</code></pre>
</div>
</div>
<p>Luego vemos lo de <code>as_data_frame = TRUE</code>. Por ahora metemos eso en un bucle.</p>
</section>
<section id="método-1.-bucle" class="level2">
<h2 class="anchored" data-anchor-id="método-1.-bucle">Método 1. Bucle</h2>
<p>Lo más intuitivo para mí siempre ha sido un bucle. Que lo plantees directamente con un <code>for()</code>, con un <code>lapply()</code> más <code>rbind</code> y <code>do.call()</code> o con otro conjunto de herramientas es cosa tuya.</p>
<p>Me resulta directo <code>map_dfr()</code> de <strong>purrr</strong> porque lo que necesito al final es un data frame de todos los data frames intermedios apilados por filas.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">paths_a_ficheros <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(path_to_folder,</span>
<span id="cb7-2">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parquet$"</span>, </span>
<span id="cb7-3">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(</span>
<span id="cb7-6">  df_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(paths_a_ficheros, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.path) {</span>
<span id="cb7-7">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_parquet</span>(</span>
<span id="cb7-8">      .path,</span>
<span id="cb7-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_select =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pickup_datetime"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airport_fee"</span>),</span>
<span id="cb7-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as_data_frame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb7-11">    )</span>
<span id="cb7-12">    </span>
<span id="cb7-13">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(airport_fee <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(pickup_datetime)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> day)</span>
<span id="cb7-17">    </span>
<span id="cb7-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gc()</span></span>
<span id="cb7-19">    </span>
<span id="cb7-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb7-21">  }) </span>
<span id="cb7-22">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
 92.233  41.167 148.677 </code></pre>
</div>
</div>
<p>Ha tardado como un minuto, pero lo tengo.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df_all)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  day        count
  &lt;date&gt;     &lt;int&gt;
1 2021-04-05  6548
2 2021-04-06  5664
3 2021-04-07  5343
4 2021-04-08  6054
5 2021-04-09  6069
6 2021-04-10  5157</code></pre>
</div>
</div>
<p>No he cargado en ningún momento todos los datos: he cargado solo lo que necesitaba de cada fichero y he operado con cada fichero por separado.</p>
<ul>
<li><code>col_select</code> te permite no leer todas las columnas sino solo las que incluyas en la selección. Los ficheros son grandes, así que ahorras tiempo y memoria si eliges previamente.</li>
<li><code>as_data_frame = TRUE</code> está diciendo a la función que cargue todo el data frame en memoria (o por lo menos la selección que hemos hecho). Si lo marcas como <code>FALSE</code> el resultado de la lectura será una tabla de arrow, y el cómputo que viene después no lo hará dplyr sino arrow, aunque luego tendrás que recuperar los datos con un <code>collect()</code>.</li>
</ul>
<section id="alternativa-en-el-bucle.-sin-selección-de-columnas" class="level3">
<h3 class="anchored" data-anchor-id="alternativa-en-el-bucle.-sin-selección-de-columnas">Alternativa en el bucle. Sin selección de columnas</h3>
<p>Siempre que sepas que te sobran columnas, elimínalas. Para que te hagas una idea, el siguiente código solo se diferencia del anterior en la selección de columnas… pues este no me tira. Se peta todo.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(</span>
<span id="cb11-2">  df_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(paths_a_ficheros, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.path) {</span>
<span id="cb11-3">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_parquet</span>(</span>
<span id="cb11-4">      .path,</span>
<span id="cb11-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as_data_frame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb11-6">    )</span>
<span id="cb11-7">    </span>
<span id="cb11-8">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(airport_fee <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(pickup_datetime)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> day)</span>
<span id="cb11-12">    </span>
<span id="cb11-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gc()</span></span>
<span id="cb11-14">    </span>
<span id="cb11-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb11-16">  }) </span>
<span id="cb11-17">)</span></code></pre></div>
</div>
</section>
<section id="alternativa-en-el-bucle.-tabla-arrow" class="level3">
<h3 class="anchored" data-anchor-id="alternativa-en-el-bucle.-tabla-arrow">Alternativa en el bucle. Tabla arrow</h3>
<p>Una opción es fijar <code>as_data_frame</code> a <code>FALSE</code> para trabajar con las tablas de arrow en lugar de data frame. Esto te será útil si cada fichero es a su vez muy grande. Pero tendrás de todos modos que usar <code>collect()</code> en cada iteración para que <code>map_dfr</code> pueda apilar los data frames. Esto hará que cada data frame (resultante de cada iteración) se vaya volcando en memoria.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(</span>
<span id="cb12-2">  df_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(paths_a_ficheros, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.path) {</span>
<span id="cb12-3">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_parquet</span>(</span>
<span id="cb12-4">      .path,</span>
<span id="cb12-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_select =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pickup_datetime"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airport_fee"</span>),</span>
<span id="cb12-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as_data_frame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb12-7">    )</span>
<span id="cb12-8">    </span>
<span id="cb12-9">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(airport_fee <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(pickup_datetime)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> day)</span>
<span id="cb12-13">    </span>
<span id="cb12-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gc()</span></span>
<span id="cb12-15">    </span>
<span id="cb12-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collect</span>(df))</span>
<span id="cb12-17">  }) </span>
<span id="cb12-18">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
 70.561  16.871  82.183 </code></pre>
</div>
</div>
</section>
</section>
<section id="método-2.-arrow" class="level2">
<h2 class="anchored" data-anchor-id="método-2.-arrow">Método 2. <code>arrow</code></h2>
<p>En lugar del bucle, si te vas a meter en <strong>arrow</strong>, le sacarás más partido si aprovechas todas sus herramientas.</p>
<p>Si tienes unos ficheros parquet en una carpeta, en lugar de leerlos uno a uno desde una mentalidad R, puedes dejar que <code>arrow</code> se encargue de la gestión en memoria con particiones de todos los ficheros en conjunto.</p>
<blockquote class="blockquote">
<p>Hay formas más recomendables de guardar los ficheros parquet para facilitar esta tarea a arrow, pero los dejo como están para este ejemplo porque me sirven así.</p>
</blockquote>
<p>Con <code>arrow::open_dataset()</code> cargo la información de los ficheros. Por ejemplo, debajo puedes ver los nombres y tipos de columnas de los ficheros:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">open_dataset</span>(path_to_folder)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FileSystemDataset with 38 Parquet files
hvfhs_license_num: string
dispatching_base_num: string
originating_base_num: string
request_datetime: timestamp[us]
on_scene_datetime: timestamp[us]
pickup_datetime: timestamp[us]
dropoff_datetime: timestamp[us]
PULocationID: int64
DOLocationID: int64
trip_miles: double
trip_time: int64
base_passenger_fare: double
tolls: double
bcf: double
sales_tax: double
congestion_surcharge: double
airport_fee: double
tips: double
driver_pay: double
shared_request_flag: string
shared_match_flag: string
access_a_ride_flag: string
wav_request_flag: string
wav_match_flag: string

See $metadata for additional Schema metadata</code></pre>
</div>
</div>
<p>Y puedes trabajar ese resultado como si fuera un data frame de dplyr.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">open_dataset</span>(path_to_folder) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(airport_fee, pickup_datetime) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(airport_fee <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(pickup_datetime)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FileSystemDataset (query)
day: date32[day]
count: int64

See $.data for the source Arrow object</code></pre>
</div>
</div>
<p>Con ese código no has ejecutado ninguna operación, por eso no tarda nada en ejercutarse. Lo que has hecho es preparar una operación con una sintaxis. Ahora falta materializarla, decirle a R que mande la orden y arrow la ejecutará. Para eso, necesitas <code>collect()</code>, pero la sintaxis de dplyr no cambia.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(</span>
<span id="cb18-2">  df_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">open_dataset</span>(path_to_folder) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(airport_fee, pickup_datetime) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(airport_fee <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(pickup_datetime)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> day) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collect</span>()</span>
<span id="cb18-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
 64.199  13.922  38.288 </code></pre>
</div>
</div>
<p>arrow se ha encargado de paralelizar la operación aprovechando los recursos y por eso tarda tan poco.</p>
<p>En tu caso no sé, pero si hubiera intentando yo pararelizar la operación con `<code>mcLapply</code> o cosas así seguramente habría petado el ordenador… porque habría intentado cargar en memoria más de lo que el ordenador puede.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df_all)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  day        count
  &lt;date&gt;     &lt;int&gt;
1 2021-06-01 26302
2 2021-06-02 23917
3 2021-06-03 26256
4 2021-06-04 27644
5 2021-06-05 22020
6 2021-06-06 28681</code></pre>
</div>
</div>
</section>
<section id="método-3.-duckdb" class="level2">
<h2 class="anchored" data-anchor-id="método-3.-duckdb">Método 3. duckdb</h2>
<p>Otra herramienta en la que te puedes apoyar sin que tu sintaxis tidyverse se vea afectada en <strong>DuckDB</strong>, en colaboración con <strong>dbplyr</strong>, el backend de dplyr para bases de datos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(duckdb)</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hive_partitioning = true</span></span>
<span id="cb22-4">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duckdb</span>())</span>
<span id="cb22-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(</span>
<span id="cb22-6">  df_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tbl</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"read_parquet('../../data/taxiny/*.parquet')"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(airport_fee, pickup_datetime) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(airport_fee <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(pickup_datetime)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> day) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collect</span>()</span>
<span id="cb22-12">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
 57.329   1.487  20.903 </code></pre>
</div>
</div>
<p>Se ha portado bien. En benchmarks más serios, con datos medianos funciona muy bien.</p>
<p>DuckDB además podrías trabajarla con SQL, lo que puede facilitar el trabajo en equipos grandes, en los que pocos miembros sabrán dplyr.</p>
</section>
<section id="comentarios-finales" class="level2">
<h2 class="anchored" data-anchor-id="comentarios-finales">Comentarios finales</h2>
<ul>
<li>Si gestionas bien las particiones de ficheros por variables, obtendrás incluso mejores resultados.</li>
<li>Recientemente ha salido <a href="https://github.com/duckdblabs/duckplyr">duckplyr</a>, para que el propio dplyr te contruya la infraestructura duckdb directamente. Pero según entiendo esto lo hace con data frames que ya tienes cargados en memoria. Recuerda que en este caso no tienes suficiente memoria.</li>
<li>Si te cabe en memoria, el clásico <code>data.table</code> de R sigue estando vigente, aunque muchos ojos se estén yendo a <em>polars</em> (<a href="https://h2oai.github.io/db-benchmark/">benchmark</a>)</li>
</ul>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-04-21-dataframes-inmemory/</guid>
  <pubDate>Sun, 21 Apr 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Relaciones espurias</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-03-18-correlation/</link>
  <description><![CDATA[ 




<p>Tienes un datos de divorcio en estados de Estados Unidos (<a href="https://xcelab.net/rm/statistical-rethinking/">fuente</a>).</p>
<p>Parece que hay correlación entre el ratio de divorcio por estado y la edad mediana a la que se casa la gente:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_light</span>())</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(d, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> MedianAgeMarriage, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Divorce)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-03-18-correlation/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>El ratio de divorcio por estado dada la mediana de edad de casarse podrías modelizarlo como:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AD_i%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_i,%20%5Csigma)%0A%5C%5C%0A%5Cmu_i%20=%20%5Calpha%20+%20%5Cbeta_AA_i%0A%5C%5C%0A%5Calpha%20%5Csim%20%5Ctext%7BNormal(0,%200,2)%7D%0A%5C%5C%0A%5Cbeta_A%20%5Csim%20%5Ctext%7BNormal(0,%200,5)%7D%0A%5C%5C%0A%5Csigma%20%5Csim%20%5Ctext%7BExponential(1)%7D%0A"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?D_i"> el ratio de divorcio estandarizado (media 0, desviación típica 1) para el Estado <img src="https://latex.codecogs.com/png.latex?i">.</li>
<li><img src="https://latex.codecogs.com/png.latex?A_i"> es la edad mediana a la que se casa la gente en el Estado <img src="https://latex.codecogs.com/png.latex?i">.</li>
<li>Como el ratio que modelizamos está centrado en 0, el intercept del modelo es esperable que sea cercano a 0.</li>
<li>Sobre <img src="https://latex.codecogs.com/png.latex?%5Cbeta_A">, si fuera igual a 1, estaríamos diciendo que por cada cambio de una desviación estándar de la edad, observaríamos un cambio de una desviación estándar en el ratio del divorcio. La desviación estándar de la edad es 1.2436303, por lo que si <img src="https://latex.codecogs.com/png.latex?%5Cbeta_A%20=%201">, un cambio de <img src="https://latex.codecogs.com/png.latex?%7B1,2%7D"> años en la mediana de edad de casarse aumentaría el ratio de divorcio en una desviación estándar, lo que parece ser demasiado fuerte.</li>
</ul>
<p>Ahora podemos ajustar el modelo y simular:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">m5<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quap</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">alist</span>(</span>
<span id="cb2-3">    D <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(mu, sigma), </span>
<span id="cb2-4">    mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A, </span>
<span id="cb2-5">    a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>), </span>
<span id="cb2-6">    bA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb2-7">    sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dexp</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-8">  ), </span>
<span id="cb2-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> d</span>
<span id="cb2-10">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-2">prior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract.prior</span>(m5<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>)</span>
<span id="cb3-3">mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">link</span>( m5<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">post=</span>prior , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>( <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) ) )</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>( <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) )</span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ( i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> ) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) , mu[i,] , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col.alpha</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>) )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-03-18-correlation/index_files/figure-html/extract-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-03-18-correlation/</guid>
  <pubDate>Mon, 18 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>¿Cómo surge la distribución normal?</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-02-24-normality/</link>
  <description><![CDATA[ 




<p>La distribución normal siempre me ha parecido demasiado perfecta para esperar verla en unos datos reales.</p>
<p>Pero claro, eso me pasa por no saber de dónde viene.</p>
<p>Te cuento.</p>
<p>Imagina un grupo de personas que parten de una línea. Cada uno lanza una moneda al aire; si sale cara, da un paso a la izquierda, de máximo 1 metro; si no, lo da a la derecha. Los pasos estarán entre 0 y 1 metro. Al cabo de 16 lanzamientos, ¿a qué distancia estará del origen?</p>
<p>Será la suma de las distancias de esos pasos.</p>
<p>Podemos calcular esto para 1000 personas.</p>
<p>Primero si dan 4 pasos:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(pos)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-02-24-normality/index_files/figure-html/pasos4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Ahora si dan 8 pasos:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(pos)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-02-24-normality/index_files/figure-html/pasos8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Ahora si dan 16:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(pos)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-02-24-normality/index_files/figure-html/pasos16-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Realmente, casi con cualquier distribución puedes hacer esto. La suma de valores de cualquier distribución seguirá una distribución normal (con algunas necesitarás una muestra más grande que con otras).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-02-24-normality/index_files/figure-html/suma-pois-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<section id="ejemplo-de-modelo-basado-en-la-normalidad" class="level2">
<h2 class="anchored" data-anchor-id="ejemplo-de-modelo-basado-en-la-normalidad">Ejemplo de modelo basado en la normalidad</h2>
<p>La altura de varias personas adultas es esperable que se distribuya como una distribución normal.</p>
<p>La idea intuitiva es que la altura de una persona adulta es el resultado de muchos pequeños aumentos que se suman. Para distintos individuos, estas sumas darán resultados distintos, porque los aumentos progresivos entre ellos serán distintos al cabo de los años. Pero el conjunto de todas ellas será normal, si has esperado suficientes años para que los casos más altos (aumentos más grandes acumulados) se compensen con los más bajos (aumentos más pequeños).</p>
<p>Vamos a trabajar con una muestra de personas, de las que conocemos su altura.</p>
<p>Queremos modelizar la altura como una distribución normal, o sea, estimaremos la media y desviación típica.</p>
<p>El método bayesiano considerará todas las medias y desviaciones típicas posibles (realmente haremos una aproximación), y evaluaremos cada una en función de cómo de plausibles son, dados los datos que tenemos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rethinking)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(Howell1)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(Howell1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   height   weight age male
1 151.765 47.82561  63    1
2 139.700 36.48581  63    0
3 136.525 31.86484  65    0
4 156.845 53.04191  41    1
5 145.415 41.27687  51    0
6 163.830 62.99259  35    1</code></pre>
</div>
</div>
<p>Por ahora, vamos a centrarnos solo en los casos adultos, porque la altura de los niños no se distribuye normalmente, sino que está correlada con la edad.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">adultos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Howell1[Howell1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, ]</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(adultos<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#800080"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-02-24-normality/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Queremos modelizar la altura <img src="https://latex.codecogs.com/png.latex?h_i"> de cada individuo <img src="https://latex.codecogs.com/png.latex?i"> como <img src="https://latex.codecogs.com/png.latex?h_i%20%5Csim%20%5Ccal%7BN%7D(%5Cmu,%20%5Csigma)">. <strong>El objetivo es estimar</strong> <img src="https://latex.codecogs.com/png.latex?%5Cmu"> y <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</p>
<p>Como estamos en un modelo bayesiano, necesitamos unos prioris para ambos parámetros. Los prioris son distribuciones de estos parámetros que consideramos razonables.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ah_i%20%5Csim%20%5Ccal%7BN%7D(%5Cmu,%20%5Csigma)%0A%5C%5C%0A%5Cmu%20%5Csim%20%5Ccal%7BN%7D(178,%2020)%0A%5C%5C%0A%5Csigma%20%5Csim%20%5Ccal%7BU%7D(0,%2050)%0A"></p>
<p>Estamos dando como distribución a priori de la media una normal centrada en <img src="https://latex.codecogs.com/png.latex?%5Ccal%7B178%7D"> y con un rango de <img src="https://latex.codecogs.com/png.latex?%5Ccal%7B40%7D">cm con una probablidad de 95%.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curve</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#800080"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-02-24-normality/index_files/figure-html/howell1-priori-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>La priori sobre la desviación típica es plana, en el sentido de que no sabemos dar más importancia a unos valores frente a otros, dentro los propuestos en el intervalo de la uniforme.</p>
<p>Podemos simular cómo serían unos datos a partir de estas prioris.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">sample_mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb9-2">sample_sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">prior_h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>, sample_mu, sample_sigma)</span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dens</span>(prior_h, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#800080"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-02-24-normality/index_files/figure-html/simulacion-prioris-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Lo que hemos hecho es simular 10.000 pares de <img src="https://latex.codecogs.com/png.latex?%5Cmu"> y <img src="https://latex.codecogs.com/png.latex?%5Csigma"> y para cada par hemos simulado una altura. Así tenemos 10.000 alturas, cada una originada a partir de una población normal distinta (pero todas las poblaciones normales son tan plausibles como indica nuestra priori).</p>
<p>Si cambiáramos la priori, la simulación a priori de la altura se vería afectada:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">sample_mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb10-2"></span>
<span id="cb10-3">prior_h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>, sample_mu, sample_sigma)</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dens</span>(prior_h, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#800080"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-02-24-normality/index_files/figure-html/simulacion-prioris2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Esa es una priori menos informativa, con una media mucho más dispersa. Pero puedes ver que las alturas que derivarían de unas prioris así no son realistas, dado que hay casos de altura negativa o también demasiado altos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">fit_altura <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quap</span>( </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">alist</span>(</span>
<span id="cb11-3">    height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>( mu , sigma ) ,</span>
<span id="cb11-4">    mu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">178</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> ) ,</span>
<span id="cb11-5">    sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dunif</span>( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> )</span>
<span id="cb11-6">  ), </span>
<span id="cb11-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> adultos</span>
<span id="cb11-8">)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">precis</span>(fit_altura)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           mean        sd       5.5%      94.5%
mu    154.65453 0.4172154 153.987737 155.321319
sigma   7.76233 0.2950801   7.290735   8.233925</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">posterior_h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract.samples</span>(fit_altura, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(posterior_h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#800080"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-02-24-normality/index_files/figure-html/altura-posteriori-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-02-24-normality/</guid>
  <pubDate>Sat, 24 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Statistical Rethinking (2)</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2024-01-24-rethinking-2/</link>
  <description><![CDATA[ 




<section id="por-qué-lo-normal-es-normal" class="level2">
<h2 class="anchored" data-anchor-id="por-qué-lo-normal-es-normal">Por qué lo normal es normal</h2>
<section id="normal-por-adición" class="level3">
<h3 class="anchored" data-anchor-id="normal-por-adición">Normal por adición</h3>
<p>Hay un experimento en el que pones a unas personas en línea con una moneda. Cada persona tiene una moneda que lanza 16 veces.</p>
<p>Por cada vez que sale cara, da un paso a la derecha; por cada vez que sale cruz, a la izquierda.</p>
<p>Cada paso será de una distancia aleatoria entre 0 y 1 metro. ¿Cuántos metros se ha desplazado cada persona con respecto al origen?</p>
<p>El experimento con una sola persona sería algo así:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">distancia_por_paso <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(distancia_por_paso)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2.171815</code></pre>
</div>
</div>
<p>Nuestro sujeto ha recorrido 2.1718148 desde la línea.</p>
<p>Lo podemos extrapolar a 10000 sujetos:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>())</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> pos), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#800080"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2024-01-24-rethinking-2/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2024-01-24-rethinking-2/</guid>
  <pubDate>Wed, 24 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>¿Cómo se usan las prioris conjugadas?</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2023-12-31-conjugate-prior/</link>
  <description><![CDATA[ 




<p>En estadística bayesiana, cuando buscas estimar un parámetro, lo que vas a obtener es una distribución de este parámetro. O sea, no obtienes un valor preciso, sino unas probabilidades asociadas a varios valores, de forma que algunos serán más probables que otros.</p>
<p>Un método intuitivo de conseguir esta distribución es usar el método del mallado ( <em>grid approximation</em> ). Con este método, relacionas todos los casos posibles, calculas una verosimilitud para cada caso, y lo multiplicas por una probabilidad a priori que decidas. Ese producto es la distribución que buscas para tu parámetro, la posteriori.</p>
<p>En algunas situaciones, usar una priori en concreto te puede simplificar luego el cálculo, ya que no te hará falta aplicar los cálculos del mallado: puedes, pero el resultado será el mismo.</p>
<section id="prioris-conjugados" class="level2">
<h2 class="anchored" data-anchor-id="prioris-conjugados">Prioris conjugados</h2>
<p>En el caso de lanzar una moneda, estás trabajando con una binomial: tienes ciertos éxitos ante un número posible de casos.</p>
<p>Si en este caso, usas como priori la distribución beta, entonces surgirá la magia.</p>
<p>La distribución es</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">monedas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-2">caras <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, monedas, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-3">p_cara <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb1-4">sample_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">beta_alpha <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-7">beta_beta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(sample_size, beta_alpha, beta_beta), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#800080"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-12-31-conjugate-prior/index_files/figure-html/setup-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand.grid</span>(caras, p_cara))</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"caras"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p_cara"</span>)</span></code></pre></div>
</div>
<p>Y podemos simular la posteriori con el método del mallado:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>prior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbeta</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_cara, beta_alpha, beta_beta)</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df$prior &lt;- dunif(df$p_cara)</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>likelihood <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbinom</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras, monedas, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_cara)</span>
<span id="cb3-5"></span>
<span id="cb3-6">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>posteriori <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>likelihood <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>prior</span>
<span id="cb3-7">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>std_posteriori <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>posteriori <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>posteriori)</span>
<span id="cb3-8"></span>
<span id="cb3-9"></span>
<span id="cb3-10">caras_observadas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_cara[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas], </span>
<span id="cb3-12">     df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>posteriori[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>posteriori[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas]), </span>
<span id="cb3-13">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probabilidad de cara"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probabilidad"</span>)</span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_cara[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas], </span>
<span id="cb3-15">      df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>prior[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>prior[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas]), </span>
<span id="cb3-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-12-31-conjugate-prior/index_files/figure-html/posterior1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>La magia está en que, dado que la distribución a priori es una beta, no necesitamos simular la posteriori, sino que sabemos que ya seguirá una distribución en concreto (una beta también, con pequeños cambios en sus parámetros);</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">posteriori_simulation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbeta</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_cara[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas], </span>
<span id="cb4-2">                               beta_alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> caras_observadas, </span>
<span id="cb4-3">                               beta_beta <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> monedas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> caras_observadas)</span>
<span id="cb4-4"></span>
<span id="cb4-5">posteriori_simulation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> posteriori_simulation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(posteriori_simulation)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_cara[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas], </span>
<span id="cb4-8">     df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>posteriori[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>posteriori[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas]), </span>
<span id="cb4-9">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probabilidad de cara"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probabilidad"</span>)</span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_cara[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas], </span>
<span id="cb4-11">      df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>prior[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>prior[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas]), </span>
<span id="cb4-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_cara[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>caras <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> caras_observadas], </span>
<span id="cb4-14">      posteriori_simulation, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-12-31-conjugate-prior/index_files/figure-html/posteriori-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2023-12-31-conjugate-prior/</guid>
  <pubDate>Sun, 31 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Statistical Rethinking (1)</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2023-12-27-rethinking-1/</link>
  <description><![CDATA[ 




<p>En <a href="https://xcelab.net/rm/statistical-rethinking/">Statistical Rethinking</a> Richard McEalreath presenta los métodos generativos en estadística bayesiana.</p>
<section id="introducción" class="level2">
<h2 class="anchored" data-anchor-id="introducción">Introducción</h2>
<p>El problema que plantea es el de estimar la proporción de agua que hay en la Tierra.</p>
<p>El procedimiento consiste en mirar en varios puntos de la Tierra y ver si hay agua o tierra. De esa forma obtienes una secuencia de valores: <code>"A", "A", "T", "A", "T", ...</code> y usas esos datos para estimar la proporción real.</p>
<p>Concretamente, en 9 observaciones has obtenido 6 porciones de agua.</p>
<p>Hay tres formas de ajustar un modelo estadístico. Las ejemplificaremos con ese problema de la proporción de agua.</p>
<p>Los códigos serán los del libro.</p>
</section>
<section id="mallado" class="level2">
<h2 class="anchored" data-anchor-id="mallado">Mallado</h2>
<p>La primera forma de ajustar un modelo estadístico es mediante mallado. Computacionalmente es costoso pero es más educativo que el resto de métodos.</p>
<p>Lo que vas a hacer es proponer unos posibles valores para el parámetro que buscas (la proporción de agua) y les das una distribución a priori a estos valores (no pasa nada ahora por que la distribución a priori no sume 1 porque luego estandarizarás el resultado final).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">grid_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define grid</span></span>
<span id="cb1-3">p_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> grid_size)</span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define prior</span></span>
<span id="cb1-5">prior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , grid_size)</span></code></pre></div>
</div>
<p>Tus priori (20 proporciones equiprobables) ya están definidas y ahora te sirven para generar posibles escenarios. La idea es ver la verosimilitud de tus datos observados ante los distintos posibles valores del parámetro.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">likelihood <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p_grid)</span>
<span id="cb2-2">likelihood</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0.000000e+00 1.518149e-06 8.185093e-05 7.772923e-04 3.598575e-03
 [6] 1.116095e-02 2.668299e-02 5.292110e-02 9.082698e-02 1.383413e-01
[11] 1.897686e-01 2.361147e-01 2.666113e-01 2.714006e-01 2.450051e-01
[16] 1.897686e-01 1.179181e-01 5.026670e-02 8.853845e-03 0.000000e+00</code></pre>
</div>
</div>
<p>Ahora calculas la posteriori, ponderando estas verosimilitudes por los prioris que tenías antes. Como los prioris no seguían una distribución de probabilidad, te toca estandarizar el resultado.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">unstd_posterior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> likelihood <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior</span>
<span id="cb4-2">posterior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> unstd_posterior <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(unstd_posterior)</span>
<span id="cb4-3">posterior</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0.000000e+00 7.989837e-07 4.307717e-05 4.090797e-04 1.893887e-03
 [6] 5.873873e-03 1.404294e-02 2.785174e-02 4.780115e-02 7.280739e-02
[11] 9.987296e-02 1.242643e-01 1.403143e-01 1.428349e-01 1.289433e-01
[16] 9.987296e-02 6.205890e-02 2.645477e-02 4.659673e-03 0.000000e+00</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(p_grid, posterior, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,</span>
<span id="cb6-2">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probabidad de agua"</span> , </span>
<span id="cb6-3">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posteriori"</span>)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mtext</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20 puntos"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-12-27-rethinking-1/index_files/figure-html/mallado-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Ahora bien, ten en cuenta que <strong>los prioris forman parte del modelo</strong>. Deberías tener un criterio para elegir unos u otros.</p>
<p>Los puedes cambiar y los resultados se verán afectados.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">p_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> grid_size)</span>
<span id="cb7-2">prior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(p_grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb7-3"></span>
<span id="cb7-4">likelihood <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p_grid)</span>
<span id="cb7-5"></span>
<span id="cb7-6">unstd_posterior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  likelihood <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior</span>
<span id="cb7-7">posterior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> unstd_posterior <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(unstd_posterior)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(p_grid, posterior, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,</span>
<span id="cb7-10">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probabidad de agua"</span> , </span>
<span id="cb7-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posteriori"</span>)</span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mtext</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%i puntos"</span>, grid_size))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-12-27-rethinking-1/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2023-12-27-rethinking-1/</guid>
  <pubDate>Wed, 27 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Introducción a análisis de supervivencia con R</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2023-12-22-survival-analysis/</link>
  <description><![CDATA[ 




<p>El nombre del análisis de supervivencia apunta maneras. Inevitablemente, yo lo relaciono con la muerte, porque seguramente se originara para saber cuánto tiempo le quedaba de vida a un paciente con alguna enfermedad.</p>
<p>Pero no sirve solo para eso.</p>
<p>Algunos ejemplos de casos que puedes resolver con análisis de supervivencia son:</p>
<ul>
<li>¿Cuál es la probabilidad de que un paciente con cáncer de mama viva más de 5 años?</li>
<li>¿Cuál es el tiempo de espera típico cuando llamas a un taxi?</li>
<li>De 100 parados, ¿cuántos esperas que encuentren trabajo pasados 2 meses?</li>
</ul>
<section id="teoría-del-análisis-de-supervivencia" class="level2">
<h2 class="anchored" data-anchor-id="teoría-del-análisis-de-supervivencia">Teoría del análisis de supervivencia</h2>
<p>Los modelos de supervivencia buscan modelizar la función de supervivencia, dada por esta ecuación:</p>
<p><img src="https://latex.codecogs.com/png.latex?S(t)%20=%201%20-%20F(t)%20=%20P(T%20%3E%20t)"></p>
<p>Viene a interpretarse como <strong>la probabilidad de que la duración del experimento sea mayor de <img src="https://latex.codecogs.com/png.latex?t"></strong>. <img src="https://latex.codecogs.com/png.latex?F(t)"> representa la función de distribución del evento.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-12-22-survival-analysis/index_files/figure-html/surv-func-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Esa gráfica ya daría algo de información. Por ejemplo:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-12-22-survival-analysis/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>Sabemos que la probabilidad de la probabilidad de superar el instante <img src="https://latex.codecogs.com/png.latex?t%20=%203"> es de 0,97.</li>
<li>Sabemos que el tercer cuartil es 5,65.</li>
</ul>
<p><strong>El objetivo del análisis de supervivencia es estimar esta función de supervivencia.</strong></p>
</section>
<section id="el-método-keplen-meier-para-estimar-la-función-de-supervivencia" class="level2">
<h2 class="anchored" data-anchor-id="el-método-keplen-meier-para-estimar-la-función-de-supervivencia">El método Keplen-Meier para estimar la función de supervivencia</h2>
<p>La fórmula que usa este método para estimar la función de supervivencia en <img src="https://latex.codecogs.com/png.latex?t"> es:</p>
<p><img src="https://latex.codecogs.com/png.latex?S(t)%20=%20%5Cprod_%7Bi:%20t_i%5Cleq%20t%7D%5Cfrac%7Bn_i%20-%20d_i%7D%7Bn_i%7D"></p>
<p>donde <img src="https://latex.codecogs.com/png.latex?t_i"> representa a cada uno de los instantes anteriores al instante <img src="https://latex.codecogs.com/png.latex?t">, <img src="https://latex.codecogs.com/png.latex?n_i"> es el número de individuos en <img src="https://latex.codecogs.com/png.latex?t_i"> y <img src="https://latex.codecogs.com/png.latex?d_i"> es el número de defunciones en <img src="https://latex.codecogs.com/png.latex?t_i">.</p>
<p>Lo podemos ver mejor con numeritos y este gráfico:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-12-22-survival-analysis/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7BS%7D(t)%20=%20%20%5Cprod_%7Bi:%20t_i%5Cleq%20t%7D%5Cfrac%7Bn_i%20-%20d_i%7D%7Bn_i%7D%20%5C%5C%0A"> <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7BS%7D(2)%20=%20%5Cfrac%7B5-0%7D%7B5%7D%20=%20%5Cfrac%7B5%7D%7B5%7D%20=%201%20%5C%5C%0A"> <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7BS%7D(3)%20=%20%5Cfrac%7B4-0%7D%7B4%7D%20=%20%5Cfrac%7B4%7D%7B4%7D%20=%201%20%5C%5C%0A"> <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7BS%7D(4)%20=%20%5Cfrac%7B4-2%7D%7B4%7D%20=%20%5Cfrac%7B2%7D%7B4%7D%20=%200,5%20%5C%5C%0A"> <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7BS%7D(5)%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%20%5Cfrac%7B2-1%7D%7B2%7D%20=%20%5Cfrac%7B1%7D%7B4%7D%20=%200,25%20%5C%5C%0A"> <img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7BS%7D(6)%20=%20%5Cfrac%7B1%7D%7B4%7D%20%5Ccdot%20%5Cfrac%7B1-0%7D%7B1%7D%20=%20%5Cfrac%7B1%7D%7B4%7D%20=%200,25%0A"></p>
<p>Aunque después de avanzar un poco con el curso, me entero de que Keplen-Meier se usa principalmente con fines descritivos.</p>
</section>
<section id="método-weibull" class="level2">
<h2 class="anchored" data-anchor-id="método-weibull">Método Weibull</h2>
<p>Un método que sí se usa para estimar la curva es el de Weibull. Sinceramente, <strong>ni idea de cómo funciona.</strong></p>
<p>Pero una forma directa de ajustar y visualizarlo es esta (para visualizar simplifica mucho si usas la librería <strong>survminer</strong>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(survival)</span>
<span id="cb1-2">wb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">survreg</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Surv</span>(time, status) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, lung)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve survival curve from model</span></span>
<span id="cb1-4">surv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get time for each probability</span></span>
<span id="cb1-7">t <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(wb, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quantile"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> surv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data frame with the information needed for ggsurvplot_df</span></span>
<span id="cb1-10">surv_wb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> t, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">surv =</span> surv, </span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upper =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">std.err =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">survminer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsurvplot_df</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> surv_wb, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">surv.geom =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>geom_line)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-12-22-survival-analysis/index_files/figure-html/weibull-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2023-12-22-survival-analysis/</guid>
  <pubDate>Fri, 22 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Comparativa pequeña entre tidyverse y R base</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2023-12-07-tidyverse-rbase/</link>
  <description><![CDATA[ 




<p>Me gusta leer <a href="https://github.com/matloff/TidyverseSkeptic">críticas contra tidyverse</a>. ¿Porque lo odio?</p>
<p>No, lo uso todo el rato. Todos los días. Mi trabajo se basa en <a href="https://www.tidyverse.org/">el tidyverse</a>.</p>
<p>¿Por qué leo críticas entonces?</p>
<p>Porque no entiendo que las haya. Así que me obligo a leer otros puntos de vista para ver en qué estoy equivocado.</p>
<p>Por ahora, gano yo. El link que publico al principio no es convincente. Un día le responderé al autor. Mientras tanto, estudio R base.</p>
<p>Me parece entretenido. Incluso bonito.</p>
<p>Y bromas aparte, le reconozco una cosa: <strong>me quita toda la gestión de dependencias.</strong> Cuando ejecuto este blog en GitHub Actions o cuando creo una librería, quitar dependencias simplifica mucho el trabajo y el proceso.</p>
<p>Eso sí me gusta de R base.</p>
<p>Pero para el día a día es un infierno.</p>
<p>Así que se me ha ocurrido hacerme un diccionario de R base y tidyverse, de cosas que consulto a veces.</p>
<p>Es un mini diccionario: faltarán muchas cosas aquí que te harán falta. Pero aquí encontrarás algunas que quizá te hagan falta. Y oye, si es así, tu búsqueda ha terminado.</p>
<section id="conversión-r-base---tidyverse" class="level2">
<h2 class="anchored" data-anchor-id="conversión-r-base---tidyverse">Conversión R base - Tidyverse</h2>
<p>Para simplificar dependencias trabajaré, por supuesto, con <code>iris</code>.</p>
<table class="caption-top table">
<caption>Comparativa R base - Tidyverse</caption>
<colgroup>
<col style="width: 39%">
<col style="width: 18%">
<col style="width: 41%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Operación</strong></td>
<td><strong>Tidyverse</strong></td>
<td><strong>R base</strong></td>
</tr>
<tr class="even">
<td>Calcula la media de una métrica por grupo.</td>
<td><p><code>iris |&gt;</code></p>
<p><code>group_by(Species) |&gt;</code></p>
<p><code>summarise(mean(Sepal.Length))</code></p></td>
<td><p><code>aggregate(</code></p>
<p><code>Sepal.Length ~ Species,</code></p>
<p><code>iris,</code></p>
<p><code>mean)</code></p></td>
</tr>
<tr class="odd">
<td>Extrae los números de un texto (aplica a cualquer patrón, como DNI, razón social, etc).</td>
<td><p><code>str_extract(</code></p>
<p><code>"cosa123cosa",</code></p>
<p><code>"\\d+")</code></p></td>
<td><p><code>regmatches(</code></p>
<p><code>"cosa123cosa",</code></p>
<p><code>m = regexpr("\\d+", "cosa123cosa", perl = TRUE))</code></p></td>
</tr>
<tr class="even">
<td>Quédate con las observaciones cuyo valor (en una métrica) sea mayor que la media de su grupo.</td>
<td><p><code>iris |&gt;</code></p>
<p><code>group_by(Species) |&gt;</code></p>
<p><code>filter(Sepal.Lengh &gt;= mean(Sepal.Length))</code></p></td>
<td><p><code>do.call("rbind",</code></p>
<p><code>lapply(split(iris, iris$Species),</code></p>
<p><code>function(df) {               subset(df, Sepal.Length &gt;= mean(df$Sepal.Length)) }))</code></p></td>
</tr>
<tr class="odd">
<td>(*) Pasa de formato ancho a formato largo - Transformación <em>melt</em> - Pasa métricas a filas</td>
<td><p><code>iris |&gt;</code></p>
<p><code>pivot_longer(-Species)</code></p></td>
<td><p><code>iris$id &lt;- 1:nrow(iris)</code><br>
<code>reshape(iris,</code></p>
<p><code>idvar="id",</code></p>
<p><code>direction="long",          varying=list(1:4),         v.names = "value",         timevar="metric")</code></p></td>
</tr>
</tbody>
</table>
<p>En la 4ª he puesto un asterisco porque está mal. No soy capaz de hacer eso en R base de una manera razonablemente cómoda para mí.</p>
<p>Pero yo lo sigo intentando.</p>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2023-12-07-tidyverse-rbase/</guid>
  <pubDate>Thu, 07 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Advent of code (2)</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2023-12-05-adventofcode-ii/</link>
  <description><![CDATA[ 




<p>Segundo ejercicio de <a href="https://adventofcode.com/">Advent of Code</a> de 2023. Voy con retraso, lo sé.</p>
<section id="parte-1" class="level2">
<h2 class="anchored" data-anchor-id="parte-1">Parte 1</h2>
<p>Mi propuesta con R base:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">total_cubes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02.txt"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4">data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Game 1: 12 red, 2 green, 5 blue; 9 red, 6 green, 4 blue; 10 red, 2 green, 5 blue; 8 blue, 9 red"
[2] "Game 2: 3 green, 7 red; 3 blue, 5 red; 2 green, 1 blue, 6 red; 3 green, 2 red, 3 blue"          
[3] "Game 3: 12 red, 18 blue, 3 green; 14 red, 4 blue, 2 green; 4 green, 15 red"                     
[4] "Game 4: 14 blue, 8 red, 10 green; 7 green, 9 blue, 4 red; 4 green, 5 red"                       
[5] "Game 5: 2 red, 1 blue, 4 green; 1 blue, 1 red, 5 green; 6 green, 3 red; 10 blue, 4 green, 1 red"</code></pre>
</div>
</div>
<p>Para cada juego (o sea, cada elemento en <code>data</code>) tengo que comprobar si las extracciones son posibles dada la cantidad de cubos original mencionada: 12 rojos, 13 verdes y 14 azules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">validate_game <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(fila, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.total_cubes =</span> total_cubes){</span>
<span id="cb3-2">  fila <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Game [0-9]+: "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, fila)</span>
<span id="cb3-3">  fila <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, fila)</span>
<span id="cb3-4">  </span>
<span id="cb3-5">  is_valid_extract <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(fila, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], </span>
<span id="cb3-7">    validate_extract, </span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-9">  )</span>
<span id="cb3-10"> </span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(is_valid_extract)</span>
<span id="cb3-12"></span>
<span id="cb3-13">}</span>
<span id="cb3-14"></span>
<span id="cb3-15">validate_extract <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.total_cubes =</span> total_cubes) {</span>
<span id="cb3-16">  lgl_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb3-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>),</span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(color, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> x) {</span>
<span id="cb3-19">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract with regex the number preceding word blue</span></span>
<span id="cb3-20">      pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+(?=%s)"</span>, color)</span>
<span id="cb3-21">      count_txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regmatches</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regexpr</span>(pattern, text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb3-22">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(count_txt) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb3-23">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-24">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>  {</span>
<span id="cb3-25">        count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(count_txt)</span>
<span id="cb3-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> total_cubes[[color]]  )</span>
<span id="cb3-27">      }</span>
<span id="cb3-28">      </span>
<span id="cb3-29">    }, </span>
<span id="cb3-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-31">  )</span>
<span id="cb3-32">  </span>
<span id="cb3-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(lgl_out)</span>
<span id="cb3-34">}</span>
<span id="cb3-35"></span>
<span id="cb3-36">valid_games <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb3-37">  data, </span>
<span id="cb3-38">  validate_game, </span>
<span id="cb3-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-40">)</span>
<span id="cb3-41"></span>
<span id="cb3-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count IDs of valid games</span></span>
<span id="cb3-43"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(valid_games))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2600</code></pre>
</div>
</div>
</section>
<section id="parte-2" class="level2">
<h2 class="anchored" data-anchor-id="parte-2">Parte 2</h2>
<p>Debería poner los enunciados aquí… pero paso.</p>
<p>Mi propuesta para la parte 2, siempre con R base:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">compute_power_game <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(fila){</span>
<span id="cb5-2">  fila <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Game [0-9]+: "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, fila)</span>
<span id="cb5-3">  fila <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, fila)</span>
<span id="cb5-4">  </span>
<span id="cb5-5">  color_counts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>),</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(color) {</span>
<span id="cb5-8">      pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+(?=%s)"</span>, color)</span>
<span id="cb5-9">      color_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regmatches</span>(fila, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gregexpr</span>(pattern, fila, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb5-10">      color_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(color_count)</span>
<span id="cb5-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(color_count)    </span>
<span id="cb5-12">    }, </span>
<span id="cb5-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-14">  )</span>
<span id="cb5-15">  </span>
<span id="cb5-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, color_counts)</span>
<span id="cb5-17"></span>
<span id="cb5-18">}</span>
<span id="cb5-19"></span>
<span id="cb5-20">game_powers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb5-21">  data, </span>
<span id="cb5-22">  compute_power_game, </span>
<span id="cb5-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-24">)</span>
<span id="cb5-25"></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># part 2 solution</span></span>
<span id="cb5-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(game_powers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 86036</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2023-12-05-adventofcode-ii/</guid>
  <pubDate>Sat, 02 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Advent of code (1)</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2023-12-01-adventofcode-i/</link>
  <description><![CDATA[ 




<p>Nunca he jugado con el <a href="https://adventofcode.com/">Advent of code</a>. Hoy me ha apetecido.</p>
<p>Para el ejercicio de hoy, me he empeñado <strong>en hacerlo en R base.</strong></p>
<section id="parte-1" class="level2">
<h2 class="anchored" data-anchor-id="parte-1">Parte 1</h2>
<p>El día 1 del <a href="https://adventofcode.com/2023">Advent of code 2023</a> nos pide que sumemos los números que aparecen en un texto.</p>
<p>El texto tiene una pinta así: <code>"four95qvkvveight5"</code>, y hay 1.000 como ese.</p>
<p>La idea es:</p>
<ul>
<li>tomar el primer dígito, 9,</li>
<li>y el último, 5</li>
<li>y concatenarlos: 95</li>
</ul>
<p>Así obtendrás 1000 números. La solución es la suma de esos 1.000 números.</p>
<p>Mi propuesta:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01.txt"</span>)</span>
<span id="cb1-2"></span>
<span id="cb1-3">get_number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb1-4">  str_number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[^0-9]"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, x)</span>
<span id="cb1-5">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(str_number)</span>
<span id="cb1-6">  str_number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(str_number, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(str_number, len, len))</span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(str_number))</span>
<span id="cb1-8">}</span>
<span id="cb1-9">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb1-10">  data, </span>
<span id="cb1-11">  get_number,</span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-13">)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55208</code></pre>
</div>
</div>
</section>
<section id="parte-2" class="level2">
<h2 class="anchored" data-anchor-id="parte-2">Parte 2</h2>
<p>Ahora hay un matiz. Fíjate de nuevo en el texto: <code>"four95qvkvveight5"</code>. Realmente, el primer número es <code>"four"</code>, o sea, 4. Lo que hay que hacer ahora es identificar el primer dígito y el último pero tanto si viene en número como en texto.</p>
<p>Luego igual, concatenarlos y sumarlos.</p>
<p>Mi propuesta:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a character vector with the numbers from zero to nine in letters</span></span>
<span id="cb3-2">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"four"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"five"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"six"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seven"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eight"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nine"</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4">split_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(words, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-5">words_inv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb3-6">  split_words, </span>
<span id="cb3-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>), </span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-9">)</span>
<span id="cb3-10"></span>
<span id="cb3-11">words_regex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb3-12">words_inv_regex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(words_inv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb3-13"></span>
<span id="cb3-14">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]"</span>, words_regex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb3-15">pattern_inv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]"</span>, words_inv_regex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change the order of a text</span></span>
<span id="cb3-18">invert <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb3-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb3-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb3-21">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb3-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) )</span>
<span id="cb3-23">  }</span>
<span id="cb3-24">}</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert a text to a number, based on the words and words_inv vectors</span></span>
<span id="cb3-27">to_numeric <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words =</span> words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words_inv =</span> words_inv) {</span>
<span id="cb3-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb3-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x))</span>
<span id="cb3-30">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> words) {</span>
<span id="cb3-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(words <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-32">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb3-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(words_inv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-34">  }</span>
<span id="cb3-35">}</span>
<span id="cb3-36"></span>
<span id="cb3-37">get_number2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, </span>
<span id="cb3-38">                        pattern, </span>
<span id="cb3-39">                        pattern_inv,</span>
<span id="cb3-40">                        words, </span>
<span id="cb3-41">                        words_inv) {</span>
<span id="cb3-42">  </span>
<span id="cb3-43">  first <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regmatches</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regexpr</span>(pattern, x))</span>
<span id="cb3-44">  first <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to_numeric</span>(first, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words =</span> words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words_inv =</span> words_inv)</span>
<span id="cb3-45">  </span>
<span id="cb3-46">  x_inv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invert</span>(x)</span>
<span id="cb3-47">  last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regmatches</span>(x_inv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regexpr</span>(pattern_inv, x_inv))</span>
<span id="cb3-48">  last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invert</span>(last)</span>
<span id="cb3-49">  last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to_numeric</span>(last, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words =</span> words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words_inv =</span> words_inv)</span>
<span id="cb3-50">  </span>
<span id="cb3-51">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(first <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> last)</span>
<span id="cb3-52">  </span>
<span id="cb3-53">}</span>
<span id="cb3-54"></span>
<span id="cb3-55"></span>
<span id="cb3-56">numbers2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb3-57">  data, </span>
<span id="cb3-58">  get_number2,</span>
<span id="cb3-59">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> pattern,</span>
<span id="cb3-60">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern_inv =</span> pattern_inv,</span>
<span id="cb3-61">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words =</span> words, </span>
<span id="cb3-62">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words_inv =</span> words_inv,</span>
<span id="cb3-63">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-64">)</span>
<span id="cb3-65"></span>
<span id="cb3-66"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(numbers2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 54578</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2023-12-01-adventofcode-i/</guid>
  <pubDate>Fri, 01 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>¿Qué formato de datos es más rápido de leer y escribir?</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2023-11-26-comparativa-tiempos-formatos-ficheros/</link>
  <description><![CDATA[ 




<p>He leído <a href="https://www.blog.dailydoseofds.com/p/the-most-overlooked-source-of-optimization">aquí</a> una comparativa entre tiempos de ejecución de lectura y escritura de varios tipos de ficheros de datos. Con Python.</p>
<p>Y he pensado:</p>
<blockquote class="blockquote">
<p>Lo voy a hacer yo con R.</p>
</blockquote>
<p>He creado dos data frames, a los que he llamado <code>df_numeric</code> y <code>df_mixed</code>. Ambos tienen un millón de filas y 20 columnas.</p>
<ul>
<li><code>df_numeric</code> tiene todas las columnas numéricas</li>
<li><code>df_mixed</code> tiene 10 columnas de tipo <code>character</code> y otras 10 de tipo <code>numeric</code>.</li>
</ul>
<p>Y lo que quiero es ver cuánto tardo en guardar cada uno en disco, en función del tipo de fichero y la función que elija.</p>
<section id="ficheros-con-columnas-numéricas" class="level2">
<h2 class="anchored" data-anchor-id="ficheros-con-columnas-numéricas">Ficheros con columnas numéricas</h2>
<p>Empiezo con el de todo numérico. Uso mi librería favorita, <code>microbenchmark</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">runtimes_numeric <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> microbenchmark<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">csv_utils =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(df_numeric, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric_utils.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">csv_readr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(df_numeric, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric_readr.csv"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fwrite =</span> data.table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fwrite</span>(df_numeric, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric_fwrite.csv"</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rds_base =</span> base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(df_numeric, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric_base.rds"</span>),</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rds_readr =</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_rds</span>(df_numeric, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric_readr.rds"</span>),</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parquet =</span> arrow<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_parquet</span>(df_numeric, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric.parquet"</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">feather =</span> arrow<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_feather</span>(df_numeric, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric.feather"</span>),</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>L</span>
<span id="cb1-10">)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
      expr         min         lq       mean     median         uq        max
 csv_utils 202203.9288 266623.082 282231.496 281121.287 302487.454 331668.044
 csv_readr   9055.3445   9846.454  20284.347  10764.766  12634.343 104354.622
    fwrite   1610.8502   8701.182   8911.451   9409.666  10717.019  11205.837
  rds_base  25460.8486  26287.225  29357.257  28765.523  32329.897  35358.147
 rds_readr    330.9374   3041.022   3080.719   3132.418   3334.561   5672.141
   parquet   3234.5500   8282.600   9649.330   9843.929  12261.475  12863.989
   feather    410.0282   4370.313   4700.664   4539.408   5586.161   7597.147
 neval
    10
    10
    10
    10
    10
    10
    10</code></pre>
</div>
</div>
<p>Voy a visualizar esto (se puede hacer directamente sobre la salida de la función <code>microbenchmark()</code> pero lo paso a data frame porque he querido hacer algunas pruebas con las que necesitaba más control, aunque al final no las muestro aquí porque no aportan nada).</p>
<p>Creo dos data frames para pintar los tiempos de cómputo y el tamaño de los ficheros. Los tiempos (milisegundos) vienen dados para ejecución: aquí están los primeros casos.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>       case       time
1   feather   410.0282
2    fwrite  1610.8502
3 rds_readr   330.9374
4   parquet  3234.5500
5  rds_base 27254.9053
6   feather  4436.2614
7   feather  7597.1466</code></pre>
</div>
</div>
<p>Tomo también el tamaño de los ficheros generados:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>       size      case
1 106522192  rds_base
2 359999269    fwrite
3 385418847 csv_readr
4 160000514 rds_readr
5 359998865 csv_utils
6 133286834   feather
7 143632169   parquet</code></pre>
</div>
</div>
<p>Creo los gráficos por separado aunque se puede visualizar todo junto (pero me parece ganas de complicar).</p>
<p>Estos son los tiempos de cómputo (quito <code>utils::write.csv()</code> porque ya sabemos que tarda mucho).</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-11-26-comparativa-tiempos-formatos-ficheros/index_files/figure-html/plot-numeric-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2023-11-26-comparativa-tiempos-formatos-ficheros/</guid>
  <pubDate>Sun, 26 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Cómo interpretas un intervalo de confianza</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2023-11-05-confianza/</link>
  <description><![CDATA[ 




<p>Creo que no entendí qué eran los intervalos de confianza en ninguna clase de estadística.</p>
<p>A ver, no digo que no me los explicaran.</p>
<p>Digo que, pese a que me los explicaron, no entendí nada de ellos.</p>
<p>En el mundo laboral me encuentro con dos situaciones contradictorias:</p>
<ul>
<li>Hay personas que defienden que todas las estimaciones que se dan deberían incluir los intervalos de confianza.</li>
<li>Pero hay personas, normalmente los consumidores o clientes de esas estimaciones, que no tienen ni idea de qué es un intervalo de confianza.</li>
</ul>
<p>Y no digo que sea culpa suya.</p>
<p>La verdad, con lo complicado que es el concepto (porque no tiene ni pies ni cabeza) y lo mal que lo dan, normal que no se enteren.</p>
<p>¿Se deberían dar los intervalos de confianza? Pues dado que algo de la incertidumbre de tus estimaciones deberías dar, mientras no tengas nada mejor, sí, deberías darlos.</p>
<p>Te muestro aquí un ejemplo de <strong>cómo se interpretan.</strong></p>
<section id="cálculo-del-intervalo" class="level2">
<h2 class="anchored" data-anchor-id="cálculo-del-intervalo">Cálculo del intervalo</h2>
<p>Voy a usar un ejemplo muy concreto.</p>
<p>¿Significa eso que lo que te voy a explicar solo sirve para este ejemplo?</p>
<p>No, es extrapolable. Pero necesito un ejemplo concreto porque si no, pasa lo de siempre: que nadie se entera de nada.</p>
<p>El ejemplo es <strong>estimar la media de una población a partir de la media de una muestra.</strong> Parece una bobada, lo sé, pero verás en breve que hay cierta incertidumbre al usar la media muestral para esto.</p>
<p>Con esto no digo que no uses la media muestral. Lo que digo es que seas consciente de que hay cierta incertidumbre.</p>
<p>Para jugar con esta incertidumbre, voy a recrear un ejemplo del que conozco la media poblacional, y veremos qué tal se comporta la media muestra.</p>
<p>Uso una población de distribución <strong>normal de media 1000 y desviación típica 100</strong>. ¿Lo puedes hacer con otros números? Sí, claro. Ya te he dicho que esto es extrapolable a cualquier cosa de estimación.</p>
<p>Voy a tomar una muestra de tamaño 100 de esta población. Y calculo la media y desviación típica.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3718</span>)</span>
<span id="cb1-2">sample_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-3">population_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb1-4">population_sd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">norm_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(sample_size, population_mean, population_sd)</span>
<span id="cb1-7"></span>
<span id="cb1-8">sample_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(norm_values)</span></code></pre></div>
</div>
<p>La media muestral es 1007.718297.</p>
<p>El objetivo de estos párrafos es calcular el intervalo de confianza para esa estimación, o sea, a la hora de usar la media muestral como estimación de la media poblacional.</p>
<p>Para ello necesitamos la media y <strong>desviación típica poblacional</strong>[^1] (las tenemos), el tamaño muestral (me lo he inventado yo, 100).</p>
<p>[^1 Si no tienes la poblacional y usas una muestral necesitas hacer un ajuste en lo que voy a contar hoy. Te lo cuento otro día.]</p>
<p>Y necesitamos también los valores de la distribución normal que delimitan la confianza al nivel que queramos (95% para no salir de lo habitual). En R lo puedes calcular con <code>qnorm(0.975)</code> y <code>qnorm(0.025)</code>.</p>
<p>El intervalo estará centrado en tu media muestral. Las cotas vendrán dadas por un margen de error.</p>
<p>Este margen de error se calcula con:</p>
<ul>
<li>La desviación típica <strong>poblacional.</strong></li>
<li>La raíz cuadrada del tamaño muestral.</li>
<li>Un valor que ahora te explico.</li>
</ul>
<p>La desviación típica de la muestra dividida por la raíz cuadrada del tamaño muestral no es un valor cualquiera. Es <strong>la desviación típica de la media muestral.</strong></p>
<p>O sea, tienes una población, y tomas una muestra; con esa muestra te calculas la media y te la guardas. Ahora tomas otra muestra, vuelves a calcular la media y te la guardas. Y así muchas veces. Todas estas medias no serán iguales entre sí: serán parecidas, y deberían estar cerca de la media poblacional, pero varían. Varían con una desviación típica. ¿Cuál? Ese valor que hemos dicho.</p>
<p>Mira.</p>
<p>Voy a calcular 1000 medias muestrales de diferentes muestras de tamaño 100 y calculo su desviación típica.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">muchas_medias <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(sample_size, population_mean, population_sd))</span>
<span id="cb2-3">})</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(muchas_medias)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10.00571</code></pre>
</div>
</div>
<p>Y ahora lo comparo con la división de la desviación típica de la población entre la raíz cuadrada del tamaño muestral: 10. ¿A que se parecen bastante?</p>
<p>Pero el margen de error no depende solo de eso, sino que falta el numerito extra. O sea, tiene sentido que el margen de error dependa de la desviación típica de lo que estás estimando, pero falta lo de la <em>confianza</em>. Si quieres mucha confianza, tendrás que aumentar de alguna forma el margen de error; y si quieres menos confianza, tendrás que reducirlo.</p>
<p>Para eso necesitas el estadístico <img src="https://latex.codecogs.com/png.latex?z">. Nos interesa el intervalo de confianza al 95%, ¿no? Pues este valor <img src="https://latex.codecogs.com/png.latex?z"> lo puedes ver como el valor de la distribución normal <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D(0,%201)"> que deja a su izquierda el 95% de la probabilidad. O sea, los números mayores que él, solo aparecerán en una distribución normal con un 5% de probabilidad.</p>
<p>Al multiplicar este valor por la desviación típica de la media muestral, lo que estás haciendo es llevar el margen de error a la escala de tu población (y no dejarla en la de una normal 0-1).</p>
<p>Pues ahora ya está todo.</p>
<p>Si eres alguien anclado en el siglo XX, buscarás el valor de <img src="https://latex.codecogs.com/png.latex?z"> en una tabla. Si vives en el presente, usarás algún software que te lo busque.</p>
<p>En R puedes usar la función <code>qnorm()</code>.</p>
<p>Quieres el 95% de probabilidad, pero ten en cuenta que la distribución normal es simétrica. Así que necesitas el extremo que deje el 2.5% a su derecha y el que deje el 2.5% a su izquierda. Lo puedes hacer con <code>qnorm(c(0.025, 0.975))</code>.</p>
<p>El resultado es que el intervalo es (988.1186572, 1027.3179369).</p>
<p>Si tienes en cuenta que la media poblacional era 1000, no es una estimación horrible.</p>
<p>Pero…</p>
</section>
<section id="interpretación-del-intervalo" class="level2">
<h2 class="anchored" data-anchor-id="interpretación-del-intervalo">Interpretación del intervalo</h2>
<p>¿Cómo interpretas esos valores? La interpretación <strong>no</strong> es que el valor de la media poblacional está ahí dentro con un 95% de probabilidad.</p>
<p>La media poblacional es un dato, es una realidad. No sabemos si está dentro o no, pero no hay una probabilidad para indicar dónde está.</p>
<p>Vamos a ver cómo se interpreta.</p>
<p>En lugar de dar la definición formal de intervalo de confianza, que no hay dios que la entienda, vamos a construir muchos intervalos de confianza.</p>
<p>Construyo 10^{4} intervalos de confianza, cada uno a partir de una muestra diferente, pero todas provenientes de la misma población.</p>
<p>Cada muestra tendrá una media, que aprovecho y calculo también.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb4-2">experiments <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(computations), <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(i) {</span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_interval</span>(sample_size, population_mean, population_sd) </span>
<span id="cb4-4">})</span></code></pre></div>
</div>
<p>Fíjate en el siguiente gráfico. Ha habido muestras cuya media muestral ha sido cercana a 960 ó a 1040. Y esas muestras tendrán sus intervalos de confianza centrados en ese valor… tiene pinta de que van a estar lejos de la media poblacional.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-11-05-confianza/index_files/figure-html/sample-mean-distribution-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>De esos experimentos que hemos hecho, podemos extraer también los intervalos de confianza. Voy a pintártelos para que veas dónde han caído.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-11-05-confianza/index_files/figure-html/plot-confints-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Toda esa banda morada son los 10^{4} intervalos de confianza calculados. La línea amarilla realmente es una sucesión de puntos (como todas las líneas) con cada media muestral.</p>
<p>La línea negra es la media poblacional. Y fíjate en que hay unos pocos intervalos (los de más abajo y los de más arriba, los extremos) que no tocan esa línea negra. O sea, <strong>hay intervalos que no contienen a la media poblacional.</strong></p>
<p>Esto es muy fuerte.</p>
<p>Al principio he tomado una muestra, he calculado la media muestral como estimación de la poblacional, y en torno a ella he construido un intervalo de confianza.</p>
<p>Ese intervalo era un posible intervalo de confianza al 95% por ciento. Y en ese caso sí contenía a la media poblacional (cosa que sé porque estoy en un experimento controlado, pero lo normal es que no sepas la media poblacional).</p>
<p><strong>Pero si me hubiera salido como muestra una diferente, podría haber ocurrido que el intervalo no hubiera contenido a la media poblacional.</strong></p>
<p>Muy fuerte esto.</p>
<p>Pero la pregunta que surge ahora es: <strong>¿cuántos intervalos no contienen a la media poblacional?</strong></p>
<p>Pues aquí entra el 95%.</p>
<section id="el-95-de-los-intervalos-de-confianza-al-95-contienen-la-media-poblacional" class="level3">
<h3 class="anchored" data-anchor-id="el-95-de-los-intervalos-de-confianza-al-95-contienen-la-media-poblacional">El 95% de los intervalos de confianza al 95% contienen la media poblacional</h3>
<p>A continuación calculo el porcentaje de intervalos que sí contienen a la media poblacional, teniendo en cuenta a los 10^{4} que he calculado.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.9519</code></pre>
</div>
</div>
<p>Me sale que el 95,19% de los intervalos calculados contienen a la media poblacional.</p>
<p>Eso es lo que quiere decir que tengas un intervalo de confianza al 95%. Significa que, de todos los intervalos que puedes calcular, el 95% tendrá al parámetro real. Pero el tuyo no sabes si está en ese 95% o no lo está (repito, en este experimento sí sabemos si está en ese porcentaje porque es un experimento controlado pero normalmente no lo sabes).</p>
<p>De hecho, puedo cambiar el nivel de confianza, y el porcentaje cambiará acorde a ello:</p>
<p><strong>Confianza al 99%</strong></p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
    pct
  &lt;dbl&gt;
1 0.990</code></pre>
</div>
</div>
<p><strong>Confianza al 80%</strong></p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
    pct
  &lt;dbl&gt;
1 0.803</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2023-11-05-confianza/</guid>
  <pubDate>Sat, 11 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Pirámide de población española, desde 1971</title>
  <dc:creator>Leonardo Hansa</dc:creator>
  <link>https://lhansa.github.io/posts/2023-10-20-piramide-de-poblacion/</link>
  <description><![CDATA[ 




<p>Te traigo una película de terror, llamada <em>La quiebra de las pensiones en España</em>.</p>
<p>Es un GIF que he hecho con la librería ggplot2 de R, y gganimate.</p>
<p>Si quieres el código, me lo pides y te lo mando (o lo buscas en mi GitHub).</p>
<p>Los datos vienen del INE.</p>
<p>En el gráfico aparecen unos valores missing en un momento dado, pero ni idea de por qué, porque dato hay.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>[1] ""</code></pre>
</div>
</div>
<p><img src="https://lhansa.github.io/posts/2023-10-20-piramide-de-poblacion/piramide-poblacion.gif" class="img-fluid"></p>
<p>Puede serte más práctico tener todos los gráficos seguidos, en lugar de quedarte mirando un GIF.</p>
<p>Aquí los tienes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lhansa.github.io/posts/2023-10-20-piramide-de-poblacion/facets.jpeg" class="img-fluid figure-img"></p>
<figcaption>Pirámides de población desde 1971 hasta 2021</figcaption>
</figure>
</div>



 ]]></description>
  <category>datos</category>
  <guid>https://lhansa.github.io/posts/2023-10-20-piramide-de-poblacion/</guid>
  <pubDate>Fri, 20 Oct 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
